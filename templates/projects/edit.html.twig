{% extends 'dashboard/base.html.twig' %}

{% block title %}√âditer {{ project.name }} - {{ parent() }}{% endblock %}

{% block nav_items %}
    <a href="{{ path('projects_index') }}" class="nav-link">
        üìÅ Projets
    </a>
    <a href="{{ path('projects_show', { slug: project.slug }) }}" class="nav-link">
        {{ project.name }}
    </a>
    <span class="nav-link active">√âdition</span>
{% endblock %}

{% block page_title %}√âditer {{ project.name }}{% endblock %}
{% block page_subtitle %}Modifiez les informations de votre projet{% endblock %}

{% block breadcrumb_items %}
    <a href="{{ path('projects_index') }}">Projets</a>
    <a href="{{ path('projects_show', { slug: project.slug }) }}">{{ project.name }}</a>
    <span>√âdition</span>
{% endblock %}

{% block header_actions %}
    <a href="{{ path('projects_show', { slug: project.slug }) }}" class="header-btn btn-secondary">
        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
        </svg>
        Voir le projet
    </a>
    <a href="{{ path('project_alerts_settings', { slug: project.slug }) }}" class="header-btn btn-secondary">
        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM8.06 2A1.31 1.31 0 006.75 3.31L2.36 7.7c-.87.87-.87 2.28 0 3.15l6.01 6.01c.43.43 1.12.43 1.55 0l4.39-4.39A1.31 1.31 0 0015.62 11L11.23 6.61c-.87-.87-2.28-.87-3.15 0z"/>
        </svg>
        Alertes
    </a>
    <a href="{{ path('project_git_settings', { slug: project.slug }) }}" class="header-btn btn-secondary">
        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
        </svg>
        Git
    </a>
    <a href="{{ path('projects_index') }}" class="header-btn btn-secondary">
        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
        </svg>
        Retour √† la liste
    </a>
{% endblock %}

{% block body %}
<div class="dashboard-section">
    <div class="projects-edit-layout">
        <div class="projects-edit-main">
            <div class="projects-form-card">
                <div class="projects-form-header">
                    <div class="form-title">
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                        Modifier les informations
                    </div>
                </div>
                <div class="projects-form-body">
                    <form method="POST" class="form-grid">
                    <div class="form-group full-width">
                        <label for="name" class="form-label required">
                            Nom du projet
                        </label>
                        <input type="text"
                               id="name"
                               name="name"
                               value="{{ app.request.request.get('name', project.name) }}"
                               required
                               maxlength="100"
                               placeholder="Ex: Mon Site E-commerce"
                               class="form-input"
                               onkeyup="updateSlugPreview()">
                        <div class="form-help">
                            Le nom sera utilis√© pour identifier votre projet dans le monitoring.
                        </div>
                        <div class="form-help">
                            <strong>Slug actuel:</strong> <span class="text-primary">{{ project.slug }}</span>
                            <span id="slug-change" class="d-none">
                                ‚Üí <span id="slug-preview" class="text-primary"></span>
                            </span>
                        </div>
                    </div>

                    <div class="form-group full-width">
                        <label for="description" class="form-label">
                            Description
                        </label>
                        <textarea id="description"
                                  name="description"
                                  rows="3"
                                  maxlength="1000"
                                  placeholder="Description optionnelle du projet..."
                                  class="form-textarea">{{ app.request.request.get('description', project.description) }}</textarea>
                        <div class="form-help">
                            Une description qui vous aidera √† identifier rapidement le projet.
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="environment" class="form-label">
                            Environnement principal
                        </label>
                        <select id="environment"
                                name="environment"
                                class="form-select">
                            <option value="">-- Aucun --</option>
                            <option value="prod" {{ (app.request.request.get('environment', project.environment)) == 'prod' ? 'selected' : '' }}>Production</option>
                            <option value="staging" {{ (app.request.request.get('environment', project.environment)) == 'staging' ? 'selected' : '' }}>Staging</option>
                            <option value="dev" {{ (app.request.request.get('environment', project.environment)) == 'dev' ? 'selected' : '' }}>Development</option>
                            <option value="test" {{ (app.request.request.get('environment', project.environment)) == 'test' ? 'selected' : '' }}>Test</option>
                        </select>
                        <div class="form-help">
                            L'environnement principal de ce projet (peut √™tre overrid√© par le client).
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="notification_email" class="form-label">
                            Email de notification
                        </label>
                        <input type="email"
                               id="notification_email"
                               name="notification_email"
                               value="{{ app.request.request.get('notification_email', project.notificationEmail) }}"
                               placeholder="admin@monsite.com"
                               class="form-input">
                        <div class="form-help">
                            Email pour recevoir les alertes importantes (optionnel).
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="repository_url" class="form-label">
                            URL du repository
                        </label>
                        <input type="url"
                               id="repository_url"
                               name="repository_url"
                               value="{{ app.request.request.get('repository_url', project.repositoryUrl) }}"
                               placeholder="https://github.com/username/project"
                               class="form-input">
                        <div class="form-help">
                            Lien vers le repository pour faciliter le debug (optionnel).
                        </div>
                    </div>

                    <div class="form-actions full-width">
                        <a href="{{ path('projects_show', { slug: project.slug }) }}" class="header-btn btn-secondary">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                            Annuler
                        </a>
                        <button type="submit" class="header-btn btn-primary">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                            </svg>
                            Sauvegarder
                        </button>
                    </div>
                </form>
            </div>
            </div>

            <!-- Actions rapides - carte s√©par√©e -->
            <div class="projects-info-card projects-info-card-marginTop">
                <div class="info-header">
                    <div class="info-title">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                        </svg>
                        Actions rapides
                    </div>
                </div>
                <div class="info-body">
                    <div class="quick-actions-grid">
                        <button class="quick-action-btn btn-secondary" onclick="resetForm()">
                            <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                            </svg>
                            <span>R√©initialiser le formulaire</span>
                        </button>

                        <a href="{{ path('dashboard_project', { project: project.slug }) }}" class="quick-action-btn btn-primary">
                            <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                            </svg>
                            <span>Voir les erreurs</span>
                        </a>

                        <button class="quick-action-btn btn-warning" onclick="regenerateToken()">
                            <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v-2l-4-4L7.257 8.743A6 6 0 0115 7zm-5 4v2a2 2 0 002 2h2l1.5-1.5"/>
                            </svg>
                            <span>R√©g√©n√©rer le token</span>
                        </button>

                        <button class="quick-action-btn {{ project.isActive ? 'btn-danger' : 'btn-success' }}"
                                onclick="toggleStatus()">
                            {% if project.isActive %}
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                                <span>D√©sactiver le projet</span>
                            {% else %}
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-9 4h10a2 2 0 002-2V7a2 2 0 00-2-2H6a2 2 0 00-2 2v9a2 2 0 002 2z"/>
                                </svg>
                                <span>Activer le projet</span>
                            {% endif %}
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="projects-preview-sidebar">
            <div class="projects-info-card">
                <div class="info-header">
                    <div class="info-title">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        Informations actuelles
                    </div>
                </div>
                <div class="info-body">
                    <div class="config-grid">
                        <div class="config-item">
                            <label>Statut</label>
                            <div class="config-value">
                                <span class="project-status {{ project.isActive ? 'active' : 'inactive' }}">
                                    {{ project.isActive ? 'Actif' : 'Inactif' }}
                                </span>
                            </div>
                        </div>

                        <div class="config-item">
                            <label>Slug actuel</label>
                            <div class="config-value">{{ project.slug }}</div>
                        </div>

                        <div class="config-item">
                            <label>Token webhook</label>
                            <div class="config-value" id="webhook-token-display">{{ project.webhookToken }}</div>
                        </div>

                        <div class="config-item">
                            <label>Erreurs</label>
                            <div class="config-value">
                                {{ project.totalErrors }} groupes<br>
                                <span class="text-muted">{{ project.totalOccurrences }} occurrences</span>
                            </div>
                        </div>

                        <div class="config-item">
                            <label>Cr√©√© le</label>
                            <div class="config-value">{{ project.createdAt|date('d/m/Y √† H:i') }}</div>
                        </div>

                        <div class="config-item">
                            <label>Derni√®re modification</label>
                            <div class="config-value">{{ project.updatedAt|date('d/m/Y √† H:i') }}</div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="projects-help-card">
                <div class="help-header">
                    <div class="help-title">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/>
                        </svg>
                        Informations importantes
                    </div>
                </div>
                <div class="help-body">
                    <p><strong>Changement de nom :</strong> Modifier le nom changera aussi le slug, ce qui peut affecter les URLs.</p>
                    <p><strong>Token webhook :</strong> Le token webhook ne change pas lors de l'√©dition. Utilisez "R√©g√©n√©rer" si n√©cessaire.</p>
                    {% if project.totalErrors > 0 %}
                    <p><strong>Projet actif :</strong> Ce projet contient {{ project.totalErrors }} erreurs. Soyez prudent avec les modifications.</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modale de confirmation -->
<div class="confirmation-modal" id="confirmModal">
    <div class="confirmation-modal__content">
        <div class="confirmation-modal__icon" id="confirmIcon">
            <svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/>
            </svg>
        </div>
        <h3 class="confirmation-modal__title" id="confirmTitle">Confirmation</h3>
        <p class="confirmation-modal__message" id="confirmMessage">√ätes-vous s√ªr de vouloir effectuer cette action ?</p>
        <div class="confirmation-modal__actions">
            <button class="confirmation-modal__button confirmation-modal__button--secondary" onclick="closeConfirmModal()">Annuler</button>
            <button class="confirmation-modal__button confirmation-modal__button--primary" id="confirmButton" onclick="confirmAction()">Confirmer</button>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/Dashboard/functions.js') }}"></script>
    <script>
        const originalName = '{{ project.name|e('js') }}';
        const originalSlug = '{{ project.slug|e('js') }}';

        // G√©n√©ration du slug en temps r√©el
        function updateSlugPreview() {
            const name = document.getElementById('name').value;

            if (name === originalName) {
                // Pas de changement, masquer l'aper√ßu
                document.getElementById('slug-change').style.display = 'none';
                return;
            }

            let slug = name.toLowerCase()
                .replace(/[^a-z0-9\-_]/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-+|-+$/g, '');

            if (slug && slug !== originalSlug) {
                document.getElementById('slug-preview').textContent = slug;
                document.getElementById('slug-change').style.display = 'inline';
            } else {
                document.getElementById('slug-change').style.display = 'none';
            }
        }

        // Variables pour la modale de confirmation
        let currentConfirmAction = null;
        
        // Gestion de la modale de confirmation
        function showConfirmModal(title, message, actionText, actionType, callback) {
            document.getElementById('confirmTitle').textContent = title;
            document.getElementById('confirmMessage').textContent = message;
            document.getElementById('confirmButton').textContent = actionText;
            document.getElementById('confirmButton').className = `confirmation-modal__button confirmation-modal__button--${actionType}`;
            
            // Mettre √† jour l'ic√¥ne selon le type
            const iconElement = document.getElementById('confirmIcon');
            iconElement.className = `confirmation-modal__icon confirmation-modal__icon--${actionType}`;
            
            // Changer l'ic√¥ne selon le type
            let iconSvg = '';
            switch(actionType) {
                case 'danger':
                    iconSvg = '<svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/></svg>';
                    break;
                case 'warning':
                    iconSvg = '<svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/></svg>';
                    break;
                case 'primary':
                    iconSvg = '<svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>';
                    break;
                default:
                    iconSvg = '<svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>';
            }
            iconElement.innerHTML = iconSvg;
            
            currentConfirmAction = callback;
            const modal = document.getElementById('confirmModal');
            modal.classList.add('show');
        }
        
        function closeConfirmModal() {
            const modal = document.getElementById('confirmModal');
            modal.classList.remove('show');
            currentConfirmAction = null;
        }
        
        function confirmAction() {
            if (currentConfirmAction) {
                currentConfirmAction();
            }
            closeConfirmModal();
        }
        
        // Fermer la modale en cliquant sur l'overlay
        document.getElementById('confirmModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeConfirmModal();
            }
        });
        
        // Fermer la modale avec la touche Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('confirmModal').classList.contains('show')) {
                closeConfirmModal();
            }
        });
        
        // R√©initialiser le formulaire
        function resetForm() {
            showConfirmModal(
                'R√©initialiser le formulaire',
                'Voulez-vous vraiment r√©initialiser le formulaire ?\n\nToutes vos modifications non sauvegard√©es seront perdues.',
                'R√©initialiser',
                'warning',
                function() {
                    document.getElementById('name').value = originalName;
                    document.getElementById('description').value = '{{ project.description|e('js') }}';
                    document.getElementById('environment').value = '{{ project.environment|e('js') }}';
                    document.getElementById('notification_email').value = '{{ project.notificationEmail|e('js') }}';
                    document.getElementById('repository_url').value = '{{ project.repositoryUrl|e('js') }}';
                    updateSlugPreview();
                    showNotification('Formulaire r√©initialis√©', 'info');
                }
            );
        }

        // Toggle statut du projet
        async function toggleStatus() {
            const isCurrentlyActive = {{ project.isActive ? 'true' : 'false' }};
            const actionText = isCurrentlyActive ? 'd√©sactiver' : 'activer';
            const actionType = isCurrentlyActive ? 'danger' : 'primary';
            
            showConfirmModal(
                `${actionText.charAt(0).toUpperCase() + actionText.slice(1)} le projet`,
                `√ätes-vous s√ªr de vouloir ${actionText} ce projet ?`,
                actionText.charAt(0).toUpperCase() + actionText.slice(1),
                actionType,
                async function() {
                    try {
                        const response = await fetch('{{ path('projects_toggle_status', { slug: project.slug }) }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            showNotification(result.message, 'success');
                            
                            // Mettre √† jour l'affichage du bouton et du statut
                            const toggleBtn = document.querySelector('button[onclick="toggleStatus()"]');
                            const statusSpan = document.querySelector('.project-status');
                            
                            if (result.is_active) {
                                // Projet activ√©
                                toggleBtn.className = 'quick-action-btn btn-danger';
                                toggleBtn.innerHTML = `
                                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    <span>D√©sactiver le projet</span>
                                `;
                                statusSpan.className = 'project-status active';
                                statusSpan.textContent = 'Actif';
                            } else {
                                // Projet d√©sactiv√©
                                toggleBtn.className = 'quick-action-btn btn-success';
                                toggleBtn.innerHTML = `
                                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-9 4h10a2 2 0 002-2V7a2 2 0 00-2-2H6a2 2 0 00-2 2v9a2 2 0 002 2z"/>
                                    </svg>
                                    <span>Activer le projet</span>
                                `;
                                statusSpan.className = 'project-status inactive';
                                statusSpan.textContent = 'Inactif';
                            }
                        } else {
                            showNotification(result.error || 'Une erreur est survenue', 'error');
                        }
                    } catch (error) {
                        showNotification('Erreur de connexion', 'error');
                        console.error('Toggle status error:', error);
                    }
                }
            );
        }

        // R√©g√©n√©rer le token
        async function regenerateToken() {
            showConfirmModal(
                '‚ö†Ô∏è R√©g√©n√©rer le token webhook',
                'Attention ! R√©g√©n√©rer le token va invalider l\'ancien token. Vous devrez mettre √† jour la configuration dans vos applications.\n\n√ätes-vous s√ªr ?',
                'R√©g√©n√©rer le token',
                'warning',
                async function() {
                    try {
                        const response = await fetch('{{ path('projects_regenerate_token', { slug: project.slug }) }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        
                        const result = await response.json();
                        console.log('Token regeneration result:', result);
                        
                        if (result.success) {
                            showNotification('Token r√©g√©n√©r√© ! Mettez √† jour vos applications.', 'warning');
                            
                            // Mettre √† jour l'affichage du token
                            const tokenElement = document.getElementById('webhook-token-display');
                            console.log('Token element found:', tokenElement);
                            console.log('New token:', result.new_token);
                            
                            if (tokenElement && result.new_token) {
                                const oldToken = tokenElement.textContent;
                                
                                // Force la mise √† jour avec plusieurs m√©thodes
                                tokenElement.textContent = result.new_token;
                                tokenElement.innerHTML = result.new_token;
                                
                                console.log('Token updated from:', oldToken, 'to:', result.new_token);
                                console.log('Current token display:', tokenElement.textContent);
                                
                                // Animation de mise √† jour
                                tokenElement.style.background = '#fef3c7';
                                tokenElement.style.transition = 'background 0.3s ease';
                                tokenElement.style.border = '2px solid #f59e0b';
                                setTimeout(() => {
                                    tokenElement.style.background = '';
                                    tokenElement.style.border = '';
                                }, 3000);
                                
                                // Force le reflow
                                tokenElement.offsetHeight;
                                
                            } else {
                                console.error('Token element not found or new_token missing');
                                console.log('Available elements with webhook-token:', document.querySelectorAll('[id*="webhook"], [class*="token"]'));
                            }
                        } else {
                            showNotification(result.error || 'Erreur lors de la r√©g√©n√©ration du token', 'error');
                        }
                    } catch (error) {
                        showNotification('Erreur de connexion', 'error');
                        console.error('Regenerate token error:', error);
                    }
                }
            );
        }

        // √âcouteurs d'√©v√©nements
        document.getElementById('name').addEventListener('input', updateSlugPreview);

        // Raccourcis clavier
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        document.querySelector('form').submit();
                        break;
                    case 'r':
                        e.preventDefault();
                        resetForm();
                        break;
                }
            }
        });

        // Validation c√¥t√© client
        document.querySelector('form').addEventListener('submit', function(e) {
            const name = document.getElementById('name').value.trim();

            if (!name) {
                e.preventDefault();
                showNotification('Le nom du projet est requis', 'error');
                document.getElementById('name').focus();
                return;
            }

            if (name.length > 100) {
                e.preventDefault();
                showNotification('Le nom du projet ne peut pas d√©passer 100 caract√®res', 'error');
                document.getElementById('name').focus();
                return;
            }

            const email = document.getElementById('notification_email').value.trim();
            if (email && !email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
                e.preventDefault();
                showNotification('L\'email de notification n\'est pas valide', 'error');
                document.getElementById('notification_email').focus();
                return;
            }

            const repoUrl = document.getElementById('repository_url').value.trim();
            if (repoUrl && !repoUrl.match(/^https?:\/\/.+/)) {
                e.preventDefault();
                showNotification('L\'URL du repository doit commencer par http:// ou https://', 'error');
                document.getElementById('repository_url').focus();
                return;
            }
        });

        // Avertissement avant de quitter si modifications non sauvegard√©es
        let hasChanges = false;

        ['name', 'description', 'environment', 'notification_email', 'repository_url'].forEach(fieldId => {
            document.getElementById(fieldId).addEventListener('input', () => {
                hasChanges = true;
            });
        });

        document.querySelector('form').addEventListener('submit', () => {
            hasChanges = false;
        });

        window.addEventListener('beforeunload', (e) => {
            if (hasChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // Focus sur le premier champ
        document.getElementById('name').focus();
        document.getElementById('name').select();
    </script>
{% endblock %}
