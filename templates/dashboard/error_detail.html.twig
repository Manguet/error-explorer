{% extends 'dashboard/base.html.twig' %}

{% set body_class = 'dashboard-error-detail' %}

{% block title %}{{ error_group.title }} - Error Explorer{% endblock %}

{% block page_title %}{{ error_group.exceptionClass }}{% endblock %}
{% block page_subtitle %}Détails et occurrences de cette erreur{% endblock %}

{% block breadcrumb_items %}
    <a href="{{ path('dashboard_project', { project: error_group.project }) }}">{{ error_group.project }}</a>
    <span>Détail erreur</span>
{% endblock %}

{% block header_actions %}
    {% if error_group.status == 'open' %}
        <button class="btn btn--success" onclick="resolveError({{ error_group.id }})">
            <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            <span class="btn__text">Résoudre</span>
        </button>
        <button class="btn btn--secondary" onclick="ignoreError({{ error_group.id }})">
            <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
            <span class="btn__text">Ignorer</span>
        </button>
    {% elseif error_group.status == 'resolved' or error_group.status == 'ignored' %}
        <button class="btn btn--warning" onclick="reopenError({{ error_group.id }})">
            <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            <span class="btn__text">Rouvrir</span>
        </button>
    {% endif %}

    {% if error_group.assignedTo %}
        <button class="btn btn--info" onclick="showAssignmentModal({{ error_group.id }})">
            <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
            </svg>
            <span class="btn__text">Réassigner</span>
        </button>
    {% else %}
        <button class="btn btn--secondary" onclick="showAssignmentModal({{ error_group.id }})">
            <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            <span class="btn__text">Assigner</span>
        </button>
    {% endif %}

    <button class="btn btn--secondary" onclick="window.print()">
        <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H3a2 2 0 00-2 2v4a2 2 0 002 2h2m12 0v4a2 2 0 01-2 2H7a2 2 0 01-2-2v-4m12 0H5m12 0v-2a2 2 0 00-2-2H7a2 2 0 00-2 2v2"/>
        </svg>
        <span class="btn__text">Imprimer</span>
    </button>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.2.1/dt-1.10.16/datatables.min.css"/>
{% endblock %}

{% block body %}
    <!-- Error Overview Card -->
    <div class="dashboard-section">
        <div class="error-detail__overview">
            <div class="error-detail__overview-content">
                <div class="error-detail__overview-header">
                    <div class="error-detail__overview-main">
                        <div class="error-detail__badges">
                            <span class="status-badge badge-{{ error_group.status }}">
                                {{ error_group.status|title }}
                            </span>
                            {% if error_group.httpStatusCode %}
                                <span class="status-badge badge-warning">
                                    HTTP {{ error_group.httpStatusCode }}
                                </span>
                            {% endif %}
                            <span class="status-badge badge-{{ error_group.errorType }}">
                                {{ error_group.errorType|title }}
                            </span>
                        </div>

                        <p class="error-detail__message">
                            {{ error_group.message }}
                        </p>

                        <div class="error-detail__meta-grid">
                            <div class="error-detail__meta-item">
                                <div class="error-detail__meta-label">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                                    </svg>
                                    Projet:
                                </div>
                                <div class="error-detail__meta-value">
                                    <a href="{{ path('dashboard_project', { project: error_group.project }) }}">
                                        {{ error_group.project }}
                                    </a>
                                    {% if error_group.environment %}
                                        <span class="error-detail__environment-tag">
                                            {{ error_group.environment }}
                                        </span>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="error-detail__meta-item">
                                <div class="error-detail__meta-label">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                    </svg>
                                    Fichier:
                                </div>
                                <div class="error-detail__meta-value">
                                    {{ error_group.file|split('/')|last }}:{{ error_group.line }}
                                </div>
                            </div>
                            <div class="error-detail__meta-item">
                                <div class="error-detail__meta-label">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                                    </svg>
                                    Occurrences:
                                </div>
                                <div class="error-detail__meta-value">
                                    {{ error_group.occurrenceCount }} au total
                                </div>
                            </div>
                            <div class="error-detail__meta-item">
                                <div class="error-detail__meta-label">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    Dernière:
                                </div>
                                <div class="error-detail__meta-value">
                                    {{ error_group.lastSeen|date('d/m/Y H:i') }}
                                </div>
                            </div>
                            <div class="error-detail__meta-item">
                                <div class="error-detail__meta-label">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                                    </svg>
                                    Assigné à:
                                </div>
                                <div class="error-detail__meta-value">
                                    {% if error_group.assignedTo %}
                                        <div class="assignment-info">
                                            <div class="assignment-avatar">
                                                {{ error_group.assignedTo.initials }}
                                            </div>
                                            <div class="assignment-details">
                                                <div class="assignment-name">{{ error_group.assignedTo.fullName }}</div>
                                                {% if error_group.assignedAt %}
                                                    <div class="assignment-date">{{ error_group.assignedAt|date('d/m/Y H:i') }}</div>
                                                {% endif %}
                                            </div>
                                        </div>
                                    {% else %}
                                        <span class="text-muted">Non assigné</span>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tags Section -->
    <div class="dashboard-section">
        <div class="tags-section">
            <div class="tags-section__header">
                <h3 class="tags-section__title">
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.99 1.99 0 013 12V7a4 4 0 014-4z"/>
                    </svg>
                    Tags
                </h3>
                <div class="tags-section__actions">
                    <button class="tags-section__action-btn" onclick="toggleTagEdit()">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                        Éditer
                    </button>
                </div>
            </div>
            <div class="tags-section__content">
                <div id="tags-display">
                    {% if error_group.tags|length > 0 %}
                        <div class="tags-container">
                            {% for tag in error_group.tags %}
                                <span class="tag" style="--tag-bg: {{ tag.color }}">
                                    <span class="tag__text">{{ tag.name }}</span>
                                    {% if tag.usageCount > 1 %}
                                        <span class="tag__count">{{ tag.usageCount }}</span>
                                    {% endif %}
                                </span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="tags-section__empty">
                            <div class="tags-section__empty-icon">
                                <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.99 1.99 0 013 12V7a4 4 0 014-4z"/>
                                </svg>
                            </div>
                            <div class="tags-section__empty-title">Aucun tag assigné</div>
                            <div class="tags-section__empty-description">
                                Ajoutez des tags pour mieux organiser et filtrer vos erreurs
                            </div>
                        </div>
                    {% endif %}
                </div>
                
                <div id="tags-edit" style="display: none;">
                    <div class="tag-input">
                        <div class="tag-input__wrapper">
                            <input type="text" 
                                   class="tag-input__field" 
                                   id="tag-input-field"
                                   placeholder="Tapez le nom d'un tag..."
                                   autocomplete="off">
                            <button class="tag-input__add-btn" onclick="addTag()">
                                <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                </svg>
                                Ajouter
                            </button>
                        </div>
                        <div class="tag-input__suggestions" id="tag-suggestions" style="display: none;"></div>
                        
                        <div id="current-tags-edit">
                            {% if error_group.tags|length > 0 %}
                                <div class="tags-container">
                                    {% for tag in error_group.tags %}
                                        <span class="tag tag--removable" style="--tag-bg: {{ tag.color }}" data-tag-id="{{ tag.id }}">
                                            <span class="tag__text">{{ tag.name }}</span>
                                            <button class="tag__remove" onclick="removeTag({{ tag.id }})">
                                                <svg width="10" height="10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                                </svg>
                                            </button>
                                        </span>
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 0.5rem; margin-top: 1rem;">
                        <button class="btn btn--primary" onclick="saveTagChanges()">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                            </svg>
                            Sauvegarder
                        </button>
                        <button class="btn btn--secondary" onclick="cancelTagEdit()">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                            Annuler
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- AI Suggestions Section -->
    {% if ai_suggestions %}
        <div class="dashboard-section error-detail__ai-section">
            <div class="dashboard-table-container">
                <div class="dashboard-table-container-header">
                    <h3>
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                        </svg>
                        Suggestions {{ ai_suggestions.source == 'ai' ? 'IA' : (ai_suggestions.source == 'plan_limitation' or ai_suggestions.source == 'quota_exceeded' ? 'automatiques' : 'automatiques') }}
                    </h3>
                    <div class="table-actions">
                        <button class="filter-btn btn-secondary" onclick="regenerateAiSuggestions({{ error_group.id }})">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                            </svg>
                            Régénérer
                        </button>
                    </div>
                </div>
                <div class="error-detail__ai-content">
                    {% set suggestions = ai_suggestions.suggestions ?? ai_suggestions %}

                    <!-- Source Badge - simplifié pour les plans sans IA -->
                    {% if ai_suggestions.source == 'plan_limitation' or ai_suggestions.source == 'quota_exceeded' %}
                        <!-- Interface simplifiée pour les plans sans IA -->
                    {% else %}
                        <!-- Interface complète pour les plans avec IA -->
                        <div class="error-detail__ai-source">
                            <div class="error-detail__ai-source-content">
                                <div class="error-detail__ai-source-info">
                                    {% if ai_suggestions.source == 'ai' %}
                                        <svg class="error-detail__ai-source-icon" width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                                        </svg>
                                        <div>
                                            <div class="table-cell-title" style="color: #0ea5e9;">
                                                Suggestions générées par Intelligence Artificielle
                                                {% if ai_suggestions.provider is defined %}
                                                    <span class="error-detail__ai-provider-badge">
                                                        {{ ai_suggestions.provider }}
                                                    </span>
                                                {% endif %}
                                            </div>
                                            {% if ai_suggestions.model is defined %}
                                                <div class="table-cell-meta">Modèle: {{ ai_suggestions.model }}</div>
                                            {% endif %}
                                        </div>
                                    {% else %}
                                        <svg class="error-detail__ai-source-icon" width="24" height="24" fill="none" stroke="#64748b" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                        <div>
                                            <div class="table-cell-title">Suggestions générées par analyse automatique</div>
                                            <div class="table-cell-meta">Basées sur des règles prédéfinies et patterns d'erreurs</div>
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="error-detail__ai-timestamp">
                                    {% if ai_suggestions.generated_at is defined %}
                                        {% if ai_suggestions.generated_at.date is defined %}
                                            {{ ai_suggestions.generated_at.date|date('d/m/Y H:i') }}
                                        {% else %}
                                            {{ ai_suggestions.generated_at }}
                                        {% endif %}
                                    {% elseif error_group.aiSuggestionsGeneratedAt %}
                                        {{ error_group.aiSuggestionsGeneratedAt|date('d/m/Y H:i') }}
                                    {% else %}
                                        {{ "now"|date('d/m/Y H:i') }}
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% endif %}

                    <!-- Severity and Category badges -->
                    <div class="error-detail__badges-row">
                        {% set severity = suggestions.severity is iterable ? (suggestions.severity|first) : suggestions.severity %}
                        {% set category = suggestions.category is iterable ? (suggestions.category|first) : suggestions.category %}
                        <span class="status-badge badge-{{ severity == 'critical' ? 'error' : (severity == 'high' ? 'warning' : 'ignored') }}">
                            <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.25rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                            </svg>
                            {{ severity|title }}
                        </span>
                        <span class="status-badge badge-info">
                            <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.25rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                            </svg>
                            {{ category|title }}
                        </span>
                    </div>

                    <!-- Root Cause -->
                    <div class="error-detail__suggestion-card">
                        <div class="error-detail__suggestion-content">
                            <h4 class="error-detail__suggestion-title">
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                </svg>
                                Cause probable
                            </h4>
                            <p class="error-detail__suggestion-text">{{ suggestions.root_cause is iterable ? (suggestions.root_cause|join(' ')) : suggestions.root_cause }}</p>
                        </div>
                    </div>

                    <!-- Immediate Actions -->
                    {% if suggestions.immediate_actions is defined and suggestions.immediate_actions|length > 0 %}
                        <div class="error-detail__suggestion-card">
                            <div class="error-detail__suggestion-content">
                                <h4 class="error-detail__suggestion-title">
                                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                    Actions immédiates
                                </h4>
                                <ul class="error-detail__suggestion-list">
                                    {% for action in suggestions.immediate_actions %}
                                        <li>{{ action }}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                    {% endif %}

                    <!-- Solutions -->
                    {% if suggestions.solutions is defined and suggestions.solutions|length > 0 %}
                        <div class="error-detail__suggestion-card">
                            <div class="error-detail__suggestion-content">
                                <h4 class="error-detail__suggestion-title">
                                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                                    </svg>
                                    Solutions proposées
                                </h4>
                                <div class="error-detail__solutions-grid">
                                    {% for solution in suggestions.solutions %}
                                        <div class="error-detail__solution-card">
                                            <h5 class="error-detail__solution-title">{{ solution.title }}</h5>
                                            <p class="error-detail__solution-description">{{ solution.description }}</p>
                                            {% if solution.code_example is defined %}
                                                <div class="error-detail__code-block">
                                                    <div class="error-detail__code-block-header">
                                                        <span>Exemple de code</span>
                                                        <button class="copy-btn" onclick="copyCode(this)">
                                                            <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                                            </svg>
                                                            Copier
                                                        </button>
                                                    </div>
                                                    <pre><code>{{ solution.code_example }}</code></pre>
                                                </div>
                                            {% endif %}
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                    {% endif %}

                    <!-- Preventive Measures -->
                    {% if suggestions.preventive_measures is defined and suggestions.preventive_measures|length > 0 %}
                        <div class="dashboard-info-card" style="margin-bottom: 2rem;">
                            <h4 class="table-cell-title" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;">
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                                </svg>
                                Mesures préventives
                            </h4>
                            <ul class="table-cell-subtitle" style="margin: 0; padding-left: 1.5rem; line-height: 1.8;">
                                {% for measure in suggestions.preventive_measures %}
                                    <li>{{ measure }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}

                    <!-- Similar Issues Keywords -->
                    {% if suggestions.similar_issues_keywords is defined and suggestions.similar_issues_keywords|length > 0 %}
                        <div class="dashboard-info-card">
                            <h4 class="table-cell-title" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;">
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                                </svg>
                                Mots-clés pour recherche
                            </h4>
                            <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                                {% for keyword in suggestions.similar_issues_keywords %}
                                    <span class="status-badge badge-ignored" style="cursor: pointer; transition: all 0.2s; display: inline-flex; align-items: center; gap: 0.25rem;" onclick="searchKeyword('{{ keyword }}')" onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
                                        <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                        </svg>
                                        {{ keyword }}
                                    </span>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    {% else %}
        <!-- No AI Suggestions -->
        <div class="dashboard-section">
            <div class="dashboard-table-container">
                <div class="dashboard-table-container-header">
                    <h3>
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                        </svg>
                        Suggestions intelligentes
                    </h3>
                    <div class="table-actions">
                        {% if user.canUseAiSuggestions %}
                            <button class="filter-btn" onclick="generateAiSuggestions({{ error_group.id }})">
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                </svg>
                                Générer suggestions
                            </button>
                        {% else %}
                            <button class="filter-btn btn-secondary" disabled title="Plan requis pour les suggestions IA">
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                                </svg>
                                Plan requis
                            </button>
                        {% endif %}
                    </div>
                </div>
                <div class="dashboard-empty-state">
                    {% if not user.canUseAiSuggestions %}
                        <div class="empty-icon">
                            <svg width="48" height="48" fill="none" stroke="#f59e0b" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                            </svg>
                        </div>
                        <h3>Suggestions IA non disponibles</h3>
                        {% if not user.plan or not user.plan.hasAiSuggestions %}
                            <p>Votre plan actuel ({{ user.planName ?? 'Gratuit' }}) ne comprend pas les suggestions IA. Mettez à niveau pour accéder aux suggestions intelligentes.</p>
                            <div style="margin-top: 1rem;">
                                <a href="{{ path('pricing') }}" class="filter-btn" style="text-decoration: none;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                    Voir les plans
                                </a>
                            </div>
                        {% else %}
                            <p>Vous avez utilisé {{ user.currentMonthlyAiSuggestions }}/{{ user.plan.maxMonthlyAiSuggestionsLabel }} suggestions IA ce mois-ci.</p>
                            <div style="margin-top: 1rem;">
                                <a href="{{ path('pricing') }}" class="filter-btn" style="text-decoration: none;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                    Augmenter le quota
                                </a>
                            </div>
                        {% endif %}
                    {% else %}
                        <div class="empty-icon">
                            <svg width="48" height="48" fill="none" stroke="#94a3b8" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
                            </svg>
                        </div>
                        <h3>Suggestions non générées</h3>
                        <p>Cliquez sur "Générer suggestions" pour obtenir des recommandations intelligentes pour résoudre cette erreur.</p>
                        {% if user.plan and user.plan.hasAiSuggestions %}
                            <div style="margin-top: 1rem; padding: 1rem; background: rgba(59, 130, 246, 0.1); border-radius: 8px; font-size: 0.875rem;">
                                <div style="color: #3b82f6; display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    Quota IA ce mois-ci
                                </div>
                                <div style="color: #64748b;">
                                    {{ user.currentMonthlyAiSuggestions }}/{{ user.plan.maxMonthlyAiSuggestionsLabel }} suggestions utilisées
                                    {% if user.plan.aiProvider %}
                                        <br>Provider: {{ user.plan.aiProvider|title }}
                                    {% endif %}
                                </div>
                            </div>
                        {% endif %}
                    {% endif %}
                </div>
            </div>
        </div>
    {% endif %}

    <!-- Chart Section -->
    {% if occurrence_stats %}
        <div class="dashboard-section error-detail__charts-section">
            <div class="dashboard-table-container">
                <div class="dashboard-table-container-header">
                    <h3>
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                        </svg>
                        Tendance des occurrences (30 derniers jours)
                    </h3>
                    <div class="table-actions">
                        <button class="filter-btn btn-secondary" onclick="refreshOccurrenceChart()">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                            </svg>
                            Actualiser
                        </button>
                    </div>
                </div>
                <div class="error-detail__chart-container">
                    <canvas id="occurrence-chart" data-stats="{{ occurrence_stats|json_encode|e('html_attr') }}"></canvas>
                </div>
            </div>
        </div>
    {% endif %}

    <!-- Two Column Layout -->
    <div class="error-detail__layout">
        <!-- Left Column - Stack Trace & Occurrences -->
        <div class="error-detail__main-column">
            <!-- Stack Trace -->
            {% if occurrences|length > 0 and occurrences[0].stackTrace %}
                <div class="dashboard-section">
                    <div class="dashboard-code-block">
                        <div class="dashboard-code-block-header">
                            <h4>
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                </svg>
                                Stack Trace
                            </h4>
                            <button class="copy-btn" onclick="copyStackTrace()">
                                <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                </svg>
                                Copier
                            </button>
                        </div>
                        <pre id="stack-trace-content" class="error-detail__stack-preview"><code>{{ occurrences[0].stackTrace }}</code></pre>
                    </div>
                </div>
            {% endif %}

            <!-- Git Code Context -->
            {% if project.isGitConfigured() and occurrences|length > 0 %}
                <div class="dashboard-section error-detail__git-context-section" id="git-code-context">
                    <div class="dashboard-table-container">
                        <div class="dashboard-table-container-header">
                            <h3>
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
                                </svg>
                                Contexte du code source
                            </h3>
                            <div class="table-actions">
                                <button class="filter-btn" onclick="loadGitContext({{ occurrences[0].id }})" id="load-git-context-btn">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                    </svg>
                                    Charger le contexte
                                </button>
                            </div>
                        </div>
                        <div id="git-code-snippets" class="git-code-snippets" style="display: none;">
                            <!-- Code snippets will be loaded here via JavaScript -->
                        </div>
                        <div id="git-code-loading" class="dashboard-empty-state" style="display: none;">
                            <div class="loading-spinner"></div>
                            <p>Chargement du contexte de code...</p>
                        </div>
                        <div id="git-code-empty" class="dashboard-empty-state">
                            <div class="empty-icon">
                                <svg width="48" height="48" fill="none" stroke="#94a3b8" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
                                </svg>
                            </div>
                            <h3>Contexte de code disponible</h3>
                            <p>Cliquez sur "Charger le contexte" pour voir le code source associé à cette erreur.</p>
                        </div>
                    </div>
                </div>
            {% endif %}

            <!-- Occurrences List -->
            <div class="dashboard-section error-detail__occurrences-section">
                <div class="dashboard-table-container">
                    <div class="dashboard-table-container-header">
                        <h3>
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                            Occurrences récentes
                        </h3>
                    </div>

                    <div class="table-container">
                        <div id="occurrences-table"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Sidebar Info -->
        <div class="error-detail__sidebar-column">
            <!-- Info Card -->
            <div class="dashboard-section">
                <div class="dashboard-table-container">
                    <div class="dashboard-table-container-header">
                        <h3>
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Informations
                        </h3>
                    </div>
                    <div style="padding: 1.5rem;">
                        <div style="display: flex; flex-direction: column; gap: 1.5rem; font-size: 0.875rem;">
                            <div>
                                <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                    Première occurrence
                                </div>
                                <div style="color: #64748b;">{{ error_group.firstSeen|date('d/m/Y H:i') }}</div>
                            </div>

                            <div>
                                <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    Dernière occurrence
                                </div>
                                <div style="color: #64748b;">{{ error_group.lastSeen|date('d/m/Y H:i') }}</div>
                            </div>

                            <div>
                                <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"/>
                                    </svg>
                                    Fréquence
                                </div>
                                <div style="color: #64748b;">
                                    {{ error_group.occurrenceCount }} occurrences
                                    {% set days = date().diff(error_group.firstSeen).days + 1 %}
                                    {% if days > 0 %}
                                        <div style="font-size: 0.75rem; margin-top: 0.25rem;">
                                            ({{ (error_group.occurrenceCount / days)|round(2) }}/jour en moyenne)
                                        </div>
                                    {% endif %}
                                </div>
                            </div>

                            <div>
                                <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14"/>
                                    </svg>
                                    Fingerprint
                                </div>
                                <div style="color: #64748b; font-size: 0.75rem; word-break: break-all; background: #f1f5f9; padding: 0.5rem; border-radius: 6px; position: relative;">
                                    {{ error_group.fingerprint|slice(0, 16) }}...
                                    <button onclick="copyFingerprint()" style="position: absolute; top: 0.25rem; right: 0.25rem; background: none; border: none; color: #3b82f6; cursor: pointer; padding: 0.25rem;" title="Copier fingerprint">
                                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions Card -->
            <div class="dashboard-section">
                <div class="dashboard-table-container">
                    <div class="dashboard-table-container-header">
                        <h3>
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                            </svg>
                            Actions rapides
                        </h3>
                    </div>
                    <div style="padding: 1.5rem;">
                        <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                            <button class="filter-btn btn-secondary" onclick="refreshOccurrenceChart()" style="width: 100%; justify-content: center;">
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                                </svg>
                                Actualiser graphique
                            </button>

                            <div class="export-dropdown" style="position: relative; width: 100%;">
                                <button class="filter-btn btn-secondary" onclick="toggleExportDropdown()" style="width: 100%; justify-content: center; position: relative;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                    </svg>
                                    Exporter occurrences
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="position: absolute; right: 1rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                    </svg>
                                </button>
                                <div id="export-dropdown" class="export-dropdown-menu" style="display: none;">
                                    <button onclick="exportOccurrences('csv')" class="export-option export-option--first">
                                        <span style="display: flex; align-items: center; gap: 0.5rem;">
                                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                            </svg>
                                            CSV (Excel)
                                        </span>
                                    </button>
                                    <button onclick="exportOccurrences('json')" class="export-option">
                                        <span style="display: flex; align-items: center; gap: 0.5rem;">
                                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
                                            </svg>
                                            JSON (Développeur)
                                        </span>
                                    </button>
                                    <button onclick="exportOccurrences('pdf')" class="export-option export-option--last">
                                        <span style="display: flex; align-items: center; gap: 0.5rem;">
                                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                            </svg>
                                            PDF (Rapport)
                                        </span>
                                    </button>
                                </div>
                            </div>

                            <a href="{{ path('dashboard_project', { project: error_group.project }) }}" class="filter-btn btn-secondary" style="width: 100%; justify-content: center; text-decoration: none;">
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                                </svg>
                                Voir projet {{ error_group.project }}
                            </a>

                            <button class="filter-btn btn-secondary" onclick="findSimilarErrors()" style="width: 100%; justify-content: center;">
                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                </svg>
                                Erreurs similaires
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stats Card -->
            <div class="dashboard-section">
                <div class="dashboard-table-container">
                    <div class="dashboard-table-container-header">
                        <h3>
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                            </svg>
                            Statistiques
                        </h3>
                    </div>
                    <div style="padding: 1.5rem;">
                        <div style="display: flex; flex-direction: column; gap: 1rem; font-size: 0.875rem;">
                            {% if occurrences|length > 0 %}
                                <div>
                                    <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                        Environnements touchés
                                    </div>
                                    <div style="color: #64748b;">
                                        {% set environments = [] %}
                                        {% for occurrence in occurrences %}
                                            {% if occurrence.environment not in environments %}
                                                {% set environments = environments|merge([occurrence.environment]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {% for env in environments %}
                                            <span class="status-badge badge-ignored" style="margin-right: 0.5rem; margin-bottom: 0.25rem;">{{ env }}</span>
                                        {% endfor %}
                                    </div>
                                </div>

                                <div>
                                    <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"/>
                                        </svg>
                                        Dernières IPs
                                    </div>
                                    <div style="color: #64748b; font-size: 0.75rem;">
                                        {% set ips = [] %}
                                        {% for occurrence in occurrences|slice(0, 3) %}
                                            {% if occurrence.ipAddress and occurrence.ipAddress not in ips %}
                                                {% set ips = ips|merge([occurrence.ipAddress]) %}
                                            {% endif %}
                                        {% endfor %}
                                        {{ ips|slice(0, 3)|join(', ') }}
                                    </div>
                                </div>
                            {% endif %}

                            <div>
                                <div style="font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                                    </svg>
                                    Type d'erreur
                                </div>
                                <div>
                                    <span class="status-badge badge-{{ error_group.errorType }}">
                                        {{ error_group.errorType|title }}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section des commentaires -->
    <div class="comments-section">
        <div class="comments-section__header">
            <h3 class="comments-section__title">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                </svg>
                Discussion
                <span class="comments-section__count" id="comments-count">0</span>
            </h3>
        </div>

        <!-- Aide sur les commentaires internes -->
        <div class="comments-help" style="background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem; font-size: 0.875rem; color: #cbd5e1;">
            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; color: #60a5fa;">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="M12 6v6l4 2"/>
                </svg>
                <strong>À propos des commentaires</strong>
            </div>
            <ul style="margin: 0; padding-left: 1.2rem; line-height: 1.5;">
                <li><strong>Commentaires publics :</strong> Visibles par tous les membres de l'équipe</li>
                <li><strong>Commentaires internes :</strong> Visibles uniquement par votre équipe (avec badge orange)</li>
                <li><strong>Fichiers :</strong> Joignez des captures d'écran, logs ou documents (max 5MB)</li>
            </ul>
        </div>

        <!-- Formulaire de nouveau commentaire -->
        <div class="comment-form" id="comment-form">
            <div class="comment-form__header">
                <div class="comment-form__avatar">
                    {{ user.initials }}
                </div>
                <div class="comment-form__user-info">
                    <div class="comment-form__user-name">{{ user.fullName }}</div>
                    <div class="comment-form__user-role">Propriétaire du projet</div>
                </div>
            </div>

            <textarea
                class="comment-form__textarea"
                id="comment-content"
                placeholder="Partagez vos observations, questions ou solutions concernant cette erreur..."
                rows="4"
            ></textarea>

            <!-- Zone de prévisualisation des fichiers -->
            <div class="comment-form__files-preview" id="files-preview" style="display: none;">
                <div class="comment-form__files-header">
                    <span>Fichiers sélectionnés :</span>
                    <button type="button" class="comment-form__clear-files" id="clear-files">
                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                        Supprimer tout
                    </button>
                </div>
                <div class="comment-form__files-list" id="files-list"></div>
            </div>

            <div class="comment-form__actions">
                <div class="comment-form__left-actions">
                    <div class="comment-form__upload">
                        <input type="file" id="comment-file" accept="image/*,.pdf,.txt,.json" multiple>
                        <label for="comment-file" class="comment-form__upload-btn" id="upload-label">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"/>
                            </svg>
                            <span id="upload-text">Joindre fichier</span>
                        </label>
                    </div>

                    <label class="comment-form__internal-toggle" title="Les commentaires internes ne sont visibles que par votre équipe">
                        <input type="checkbox" id="comment-internal">
                        <span>Commentaire interne</span>
                    </label>
                </div>

                <div class="comment-form__right-actions">
                    <button type="button" class="comment-form__cancel-btn" id="cancel-comment" style="display: none;">
                        Annuler
                    </button>
                    <button type="button" class="comment-form__submit-btn" id="submit-comment">
                        Publier le commentaire
                    </button>
                </div>
            </div>
        </div>

        <!-- Liste des commentaires -->
        <div class="comments-list" id="comments-list">
            <div class="comments-loading" id="comments-loading">
                <div class="comments-loading__spinner"></div>
                Chargement des commentaires...
            </div>
        </div>

        <!-- État vide -->
        <div class="comments-empty" id="comments-empty" style="display: none;">
            <h4 class="comments-empty__title">Aucun commentaire</h4>
            <p class="comments-empty__description">
                Soyez le premier à commenter cette erreur.<br>
                Partagez vos observations ou vos solutions.
            </p>
        </div>
    </div>

    <!-- Lightbox pour les images -->
    <div class="image-lightbox" id="image-lightbox">
        <div class="image-lightbox__content">
            <button class="image-lightbox__close" onclick="closeLightbox()">×</button>
            <img class="image-lightbox__image" id="lightbox-image" src="" alt="">
        </div>
    </div>

    <!-- Modal pour les détails d'occurrence -->
    <div id="occurrence-details-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Détails de l'occurrence</h3>
                <button class="modal-close" onclick="closeOccurrenceModal()">&times;</button>
            </div>
            <div class="modal-body" id="occurrence-details-content">
                <div class="loading-spinner" style="text-align: center; padding: 2rem;">
                    <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f4f6; border-radius: 50%; border-top-color: #3b82f6; animation: spin 1s ease-in-out infinite;"></div>
                    <p style="margin-top: 1rem; color: #64748b;">Chargement des détails...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour le contexte complet -->
    <div id="occurrence-context-modal" class="modal" style="display: none;">
        <div class="modal-content modal-content--large">
            <div class="modal-header">
                <h3>Contexte complet de l'occurrence</h3>
                <button class="modal-close" onclick="closeContextModal()">&times;</button>
            </div>
            <div class="modal-body" id="occurrence-context-content">
                <div class="loading-spinner" style="text-align: center; padding: 2rem;">
                    <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f4f6; border-radius: 50%; border-top-color: #3b82f6; animation: spin 1s ease-in-out infinite;"></div>
                    <p style="margin-top: 1rem; color: #64748b;">Chargement du contexte...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal d'assignation -->
    <div class="assignment-modal" id="assignment-modal">
        <div class="assignment-modal__content">
            <div class="assignment-modal__header">
                <h3 class="assignment-modal__title">Assigner l'erreur</h3>
                <button class="assignment-modal__close" onclick="hideAssignmentModal()">
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div class="assignment-modal__body">
                <div class="assignment-user-list" id="assignment-user-list">
                    <!-- Sera rempli dynamiquement -->
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.2.1/dt-1.10.16/datatables.min.js"></script>
    <script src="/bundles/datatables/js/datatables.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // The error action functions (resolveError, ignoreError, reopenError)
            // are already defined globally in dashboard.js, no need to redefine them here

            // Toggle des détails d'occurrence
            window.toggleOccurrenceDetails = function(occurrenceId) {
                const detailsRow = document.getElementById(`details-${occurrenceId}`);
                if (detailsRow.style.display === 'none') {
                    detailsRow.style.display = 'table-row';
                } else {
                    detailsRow.style.display = 'none';
                }
            };

            // Load Git context
            window.loadGitContext = async function(occurrenceId) {
                const projectId = {{ project.id }};
                const contextDiv = document.getElementById('git-code-context');
                const snippetsDiv = document.getElementById('git-code-snippets');
                const loadingDiv = document.getElementById('git-code-loading');
                const emptyDiv = document.getElementById('git-code-empty');
                const loadBtn = document.getElementById('load-git-context-btn');

                // Show loading state
                loadBtn.disabled = true;
                snippetsDiv.style.display = 'none';
                emptyDiv.style.display = 'none';
                loadingDiv.style.display = 'block';

                try {
                    const response = await fetch(`/api/project/${projectId}/code-context/${occurrenceId}`);

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || 'Failed to load code context');
                    }

                    const data = await response.json();

                    if (data.snippets && data.snippets.length > 0) {
                        // Build HTML for snippets
                        let html = '';

                        data.snippets.forEach((snippet, index) => {
                            html += `
                                <div class="git-code-snippet" style="margin-bottom: 2rem;">
                                    <div class="dashboard-code-block">
                                        <div class="dashboard-code-block-header">
                                            <div>
                                                <strong>${escapeHtml(snippet.file)}</strong>
                                                ${snippet.function ? `<span class="table-cell-meta" style="margin-left: 1rem;">in ${escapeHtml(snippet.function)}()</span>` : ''}
                                            </div>
                                            <button class="copy-btn" onclick="copyCodeSnippet(${index})">
                                                <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                                                </svg>
                                                Copier
                                            </button>
                                        </div>
                                        <div class="git-code-snippet__lines">
                            `;

                            snippet.snippet.forEach(line => {
                                const lineClass = line.is_error_line ? 'git-code-snippet__line--error' : '';
                                html += `
                                    <div class="git-code-snippet__line ${lineClass}">
                                        <span class="git-code-snippet__line-number">${line.line}</span>
                                        <pre class="git-code-snippet__line-content"><code>${escapeHtml(line.content)}</code></pre>
                                    </div>
                                `;
                            });

                            html += `
                                        </div>
                                    </div>
                                </div>
                            `;
                        });

                        snippetsDiv.innerHTML = html;
                        snippetsDiv.style.display = 'block';

                        // Store snippets for copy functionality
                        window.gitCodeSnippets = data.snippets;
                    } else {
                        emptyDiv.innerHTML = `
                            <div class="empty-icon">
                                <svg width="48" height="48" fill="none" stroke="#94a3b8" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </div>
                            <h3>Aucun contexte de code disponible</h3>
                            <p>Le code source n'a pas pu être récupéré pour cette erreur.</p>
                        `;
                        emptyDiv.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Error loading git context:', error);
                    emptyDiv.innerHTML = `
                        <div class="empty-icon">
                            <svg width="48" height="48" fill="none" stroke="#ef4444" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <h3>Erreur de chargement</h3>
                        <p>${escapeHtml(error.message)}</p>
                    `;
                    emptyDiv.style.display = 'block';
                } finally {
                    loadingDiv.style.display = 'none';
                    loadBtn.disabled = false;
                }
            };

            // Copy code snippet
            window.copyCodeSnippet = function(index) {
                if (window.gitCodeSnippets && window.gitCodeSnippets[index]) {
                    const snippet = window.gitCodeSnippets[index];
                    const text = snippet.snippet.map(line => line.content).join('\n');

                    navigator.clipboard.writeText(text).then(() => {
                        showNotification('Code copié !', 'success');
                    }).catch(() => {
                        showNotification('Erreur lors de la copie', 'error');
                    });
                }
            };

            // Escape HTML function
            function escapeHtml(text) {
                const map = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return text.replace(/[&<>"']/g, m => map[m]);
            }

            // Copier la stack trace
            window.copyStackTrace = function() {
                const stackTrace = document.getElementById('stack-trace-content');
                if (stackTrace) {
                    copyToClipboard(stackTrace.textContent);
                }
            };

            // Copier le fingerprint
            window.copyFingerprint = function() {
                copyToClipboard('{{ error_group.fingerprint }}');
            };

            // Graphique des occurrences
            {% if occurrence_stats %}
            function initOccurrenceChart() {
                const canvas = document.getElementById('occurrence-chart');
                if (!canvas) return;

                const ctx = canvas.getContext('2d');
                const stats = {{ occurrence_stats|json_encode|raw }};

                drawSimpleChart(ctx, stats);
            }

            function drawSimpleChart(ctx, data) {
                const canvas = ctx.canvas;
                const width = canvas.width;
                const height = canvas.height;

                // Clear canvas
                ctx.clearRect(0, 0, width, height);

                if (!data || data.length === 0) return;

                // Configuration
                const padding = 60;
                const chartWidth = width - (padding * 2);
                const chartHeight = height - (padding * 2);

                // Find min/max values
                const values = data.map(d => d.count);
                const maxValue = Math.max(...values, 1);

                // Draw axes
                ctx.strokeStyle = '#e2e8f0';
                ctx.lineWidth = 1;

                // Y axis
                ctx.beginPath();
                ctx.moveTo(padding, padding);
                ctx.lineTo(padding, height - padding);
                ctx.stroke();

                // X axis
                ctx.beginPath();
                ctx.moveTo(padding, height - padding);
                ctx.lineTo(width - padding, height - padding);
                ctx.stroke();

                // Draw line chart
                if (data.length > 1) {
                    ctx.strokeStyle = '#3b82f6';
                    ctx.lineWidth = 3;
                    ctx.beginPath();

                    data.forEach((point, index) => {
                        const x = padding + (index / (data.length - 1)) * chartWidth;
                        const y = height - padding - (point.count / maxValue) * chartHeight;

                        if (index === 0) {
                            ctx.moveTo(x, y);
                        } else {
                            ctx.lineTo(x, y);
                        }
                    });

                    ctx.stroke();

                    // Draw points
                    ctx.fillStyle = '#3b82f6';
                    data.forEach((point, index) => {
                        const x = padding + (index / (data.length - 1)) * chartWidth;
                        const y = height - padding - (point.count / maxValue) * chartHeight;

                        ctx.beginPath();
                        ctx.arc(x, y, 4, 0, 2 * Math.PI);
                        ctx.fill();
                    });
                }

                // Labels
                ctx.fillStyle = '#64748b';
                ctx.font = '12px Inter, system-ui, sans-serif';
                ctx.textAlign = 'center';

                // X labels (dates)
                data.forEach((point, index) => {
                    if (index % Math.ceil(data.length / 7) === 0) {
                        const x = padding + (index / (data.length - 1)) * chartWidth;
                        const date = new Date(point.date);
                        ctx.fillText(date.getDate() + '/' + (date.getMonth() + 1), x, height - 10);
                    }
                });

                // Y label max
                ctx.textAlign = 'right';
                ctx.fillText(maxValue.toString(), padding - 10, padding + 5);
                ctx.fillText('0', padding - 10, height - padding + 5);
            }

            window.refreshOccurrenceChart = function() {
                fetch(`{{ path('dashboard_api_occurrence_chart', { id: error_group.id }) }}`)
                    .then(response => response.json())
                    .then(data => {
                        const canvas = document.getElementById('occurrence-chart');
                        if (canvas) {
                            drawSimpleChart(canvas.getContext('2d'), data);
                            showNotification('Graphique mis à jour', 'success');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        showNotification('Erreur lors de la mise à jour', 'error');
                    });
            };

            // Initialize chart
            initOccurrenceChart();
            {% endif %}

            // Actions supplémentaires
            window.toggleExportDropdown = function() {
                const dropdown = document.getElementById('export-dropdown');
                dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
            };

            window.exportOccurrences = function(format = 'csv') {
                // Fermer le dropdown
                document.getElementById('export-dropdown').style.display = 'none';

                showNotification(`Export ${format.toUpperCase()} en cours...`, 'info');

                // Construire l'URL d'export
                const exportUrl = `/dashboard/error/{{ error_group.id }}/export-occurrences?format=${format}&limit=100`;

                // Créer un lien de téléchargement temporaire
                const link = document.createElement('a');
                link.href = exportUrl;
                link.download = `occurrences_{{ error_group.project }}_${new Date().toISOString().slice(0,10)}.${format}`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                showNotification(`Export ${format.toUpperCase()} téléchargé!`, 'success');
            };

            // Fermer le dropdown si on clique ailleurs
            document.addEventListener('click', function(e) {
                const dropdown = document.getElementById('export-dropdown');
                const exportDropdown = e.target.closest('.export-dropdown');
                if (!exportDropdown && dropdown) {
                    dropdown.style.display = 'none';
                }
            });

            window.findSimilarErrors = function() {
                const searchUrl = `{{ path('dashboard_index') }}?search={{ error_group.exceptionClass|url_encode }}`;
                window.open(searchUrl, '_blank');
            };

            // AI Suggestions functions
            window.generateAiSuggestions = async function(errorId) {
                const button = event.target.closest('button');
                const originalText = button.innerHTML;

                button.disabled = true;
                button.innerHTML = '<svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="animate-spin"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg> Génération...';

                try {
                    const response = await fetch(`/dashboard/error/${errorId}/generate-suggestions`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification('Suggestions générées avec succès', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification(result.error || 'Erreur lors de la génération', 'error');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    showNotification('Erreur lors de la génération des suggestions', 'error');
                } finally {
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            };

            window.regenerateAiSuggestions = function(errorId) {
                return generateAiSuggestions(errorId);
            };

            window.copyCode = function(button) {
                const codeElement = button.parentElement.querySelector('code');
                if (codeElement) {
                    copyToClipboard(codeElement.textContent);
                    const originalText = button.textContent;
                    button.textContent = 'Copié!';
                    setTimeout(() => {
                        button.textContent = originalText;
                    }, 2000);
                }
            };

            window.searchKeyword = function(keyword) {
                const searchUrl = `{{ path('dashboard_index') }}?search=${encodeURIComponent(keyword)}`;
                window.open(searchUrl, '_blank');
            };

            // Initialiser DataTable pour les occurrences
            $('#occurrences-table').initDataTables({{ datatable_settings(occurrence_table) }}, {
                searching: true,
                dom: 'lTfgtpi',
                pageLength: 25,
                responsive: true,
                language: {
                    "sProcessing":     "Traitement en cours...",
                    "sSearch":         "Rechercher :",
                    "sLengthMenu":     "Afficher _MENU_ éléments",
                    "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
                    "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
                    "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
                    "sInfoPostFix":    "",
                    "sLoadingRecords": "Chargement en cours...",
                    "sZeroRecords":    "Aucun élément à afficher",
                    "sEmptyTable":     "Aucune donnée disponible dans le tableau",
                    "oPaginate": {
                        "sFirst":      "Premier",
                        "sPrevious":   "Précédent",
                        "sNext":       "Suivant",
                        "sLast":       "Dernier"
                    },
                    "oAria": {
                        "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                        "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
                    }
                },
                drawCallback: function() {
                    initializeOccurrenceActions();
                }
            });

            // Initialiser les actions des occurrences
            window.initializeOccurrenceActions = function() {
                // Actions pour les boutons de détails
                $('.occurrence-details-btn').off('click').on('click', function() {
                    const occurrenceId = $(this).data('occurrence-id');
                    showOccurrenceDetails(occurrenceId);
                });

                // Actions pour les boutons de contexte
                $('.occurrence-context-btn').off('click').on('click', function() {
                    const occurrenceId = $(this).data('occurrence-id');
                    showOccurrenceContext(occurrenceId);
                });
            };

            // Fonctions pour gérer les modales
            window.showOccurrenceDetails = async function(occurrenceId) {
                const modal = document.getElementById('occurrence-details-modal');
                const content = document.getElementById('occurrence-details-content');

                // Afficher la modal avec la classe show
                modal.classList.add('show');
                content.innerHTML = `
                    <div class="loading-spinner" style="text-align: center; padding: 2rem;">
                        <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f4f6; border-radius: 50%; border-top-color: #3b82f6; animation: spin 1s ease-in-out infinite;"></div>
                        <p style="margin-top: 1rem; color: #64748b;">Chargement des détails...</p>
                    </div>
                `;

                try {
                    const response = await fetch(`/dashboard/api/occurrence/${occurrenceId}/details`);
                    const data = await response.json();

                    if (data.success) {
                        content.innerHTML = buildOccurrenceDetailsHTML(data.occurrence);
                    } else {
                        content.innerHTML = `
                            <div style="text-align: center; padding: 2rem; color: #ef4444;">
                                <p>Erreur: ${data.error || 'Impossible de charger les détails'}</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement des détails:', error);
                    content.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #ef4444;">
                            <p>Erreur lors du chargement des détails</p>
                        </div>
                    `;
                }
            };

            window.showOccurrenceContext = async function(occurrenceId) {
                const modal = document.getElementById('occurrence-context-modal');
                const content = document.getElementById('occurrence-context-content');

                // Afficher la modal avec la classe show
                modal.classList.add('show');
                content.innerHTML = `
                    <div class="loading-spinner" style="text-align: center; padding: 2rem;">
                        <div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f4f6; border-radius: 50%; border-top-color: #3b82f6; animation: spin 1s ease-in-out infinite;"></div>
                        <p style="margin-top: 1rem; color: #64748b;">Chargement du contexte...</p>
                    </div>
                `;

                try {
                    const response = await fetch(`/dashboard/api/occurrence/${occurrenceId}/details`);
                    const data = await response.json();

                    if (data.success) {
                        content.innerHTML = buildOccurrenceContextHTML(data.occurrence);
                    } else {
                        content.innerHTML = `
                            <div style="text-align: center; padding: 2rem; color: #ef4444;">
                                <p>Erreur: ${data.error || 'Impossible de charger le contexte'}</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement du contexte:', error);
                    content.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #ef4444;">
                            <p>Erreur lors du chargement du contexte</p>
                        </div>
                    `;
                }
            };

            // Fonction pour construire le HTML des détails
            function buildOccurrenceDetailsHTML(occurrence) {
                return `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Informations générales
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-detail-section__grid">
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Date</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.created_at}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">ID</div>
                                    <div class="occurrence-detail-section__item-value">#${occurrence.id}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Environnement</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.environment || 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Adresse IP</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.ip_address || 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">User ID</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.user_id || 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Session ID</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.session_id ? occurrence.session_id.substring(0, 16) + '...' : 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"/>
                            </svg>
                            Requête HTTP
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-detail-section__grid">
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Méthode</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.http_method || 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item" style="grid-column: span 2;">
                                    <div class="occurrence-detail-section__item-label">URL</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.url || 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item" style="grid-column: span 3;">
                                    <div class="occurrence-detail-section__item-label">User Agent</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.user_agent || 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                            </svg>
                            Performance
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-detail-section__grid">
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Mémoire utilisée</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.memory_usage ? (occurrence.memory_usage / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</div>
                                </div>
                                <div class="occurrence-detail-section__item">
                                    <div class="occurrence-detail-section__item-label">Temps d'exécution</div>
                                    <div class="occurrence-detail-section__item-value">${occurrence.execution_time ? occurrence.execution_time + ' ms' : 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Fonction pour construire le HTML du contexte complet
            function buildOccurrenceContextHTML(occurrence) {
                return `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                            </svg>
                            Stack Trace
                        </div>
                        <div class="occurrence-detail-section__content">
                            ${occurrence.stack_trace ? buildStackTraceHTML(occurrence.stack_trace) : '<p>Aucune stack trace disponible</p>'}
                        </div>
                    </div>

                    ${occurrence.breadcrumbs ? `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>
                            </svg>
                            Breadcrumbs
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-json-data">${JSON.stringify(occurrence.breadcrumbs, null, 2)}</div>
                        </div>
                    </div>
                    ` : ''}

                    ${occurrence.request_data ? `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                            </svg>
                            Données de la requête
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-json-data">${JSON.stringify(occurrence.request_data, null, 2)}</div>
                        </div>
                    </div>
                    ` : ''}

                    ${occurrence.headers ? `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                            </svg>
                            Headers HTTP
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-json-data">${JSON.stringify(occurrence.headers, null, 2)}</div>
                        </div>
                    </div>
                    ` : ''}

                    ${occurrence.context ? `
                    <div class="occurrence-detail-section">
                        <div class="occurrence-detail-section__title">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            Contexte supplémentaire
                        </div>
                        <div class="occurrence-detail-section__content">
                            <div class="occurrence-json-data">${JSON.stringify(occurrence.context, null, 2)}</div>
                        </div>
                    </div>
                    ` : ''}
                `;
            }

            // Fonction pour construire la stack trace formatée
            function buildStackTraceHTML(stackTrace) {
                if (typeof stackTrace === 'string') {
                    return `<div class="occurrence-stack-trace">${stackTrace}</div>`;
                }

                if (Array.isArray(stackTrace)) {
                    let html = '<div class="occurrence-stack-trace">';
                    stackTrace.forEach((frame, index) => {
                        html += `
                            <div class="stack-frame">
                                <div class="stack-frame__file">${frame.file || 'Unknown file'}</div>
                                <div class="stack-frame__line">Line: ${frame.line || 'Unknown'}</div>
                                ${frame.function ? `<div class="stack-frame__function">${frame.function}</div>` : ''}
                            </div>
                        `;
                    });
                    html += '</div>';
                    return html;
                }

                return `<div class="occurrence-json-data">${JSON.stringify(stackTrace, null, 2)}</div>`;
            }

            // Fonctions pour fermer les modales
            window.closeOccurrenceModal = function() {
                document.getElementById('occurrence-details-modal').classList.remove('show');
            };

            window.closeContextModal = function() {
                document.getElementById('occurrence-context-modal').classList.remove('show');
            };

            // Fermer les modales en cliquant sur le fond
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    e.target.classList.remove('show');
                }
            });

            // Gestion de l'assignation des erreurs
            let currentErrorId = null;

            window.showAssignmentModal = async function(errorId) {
                currentErrorId = errorId;
                const modal = document.getElementById('assignment-modal');
                const userList = document.getElementById('assignment-user-list');

                // Récupérer la liste des utilisateurs assignables
                try {
                    const projectSlug = '{{ error_group.project }}';
                    const response = await fetch(`/projects/details/${projectSlug}/assignable-users`);
                    const data = await response.json();

                    if (data.success) {
                        let usersHtml = '<div class="assignment-user-item unassign-option" data-user-id="">';
                        usersHtml += '<div class="assignment-user-avatar">×</div>';
                        usersHtml += '<div class="assignment-user-info">';
                        usersHtml += '<div class="assignment-user-name">Non assigné</div>';
                        usersHtml += '<div class="assignment-user-role">Retirer l\'assignation</div>';
                        usersHtml += '</div></div>';

                        data.users.forEach(user => {
                            usersHtml += `<div class="assignment-user-item" data-user-id="${user.id}">`;
                            usersHtml += `<div class="assignment-user-avatar">${user.initials}</div>`;
                            usersHtml += '<div class="assignment-user-info">';
                            usersHtml += `<div class="assignment-user-name">${user.full_name}</div>`;
                            usersHtml += `<div class="assignment-user-role">${user.role}</div>`;
                            usersHtml += '</div></div>';
                        });

                        userList.innerHTML = usersHtml;

                        // Ajouter les événements de clic
                        document.querySelectorAll('.assignment-user-item').forEach(item => {
                            item.addEventListener('click', () => assignError(item.dataset.userId));
                        });

                        modal.classList.add('show');
                    } else {
                        if (typeof showNotification === 'function') {
                            showNotification(data.error || 'Erreur lors du chargement des utilisateurs', 'error');
                        } else {
                            alert(data.error || 'Erreur lors du chargement des utilisateurs');
                        }
                    }
                } catch (error) {
                    console.error('Error loading assignable users:', error);
                    if (typeof showNotification === 'function') {
                        showNotification('Erreur lors du chargement des utilisateurs', 'error');
                    } else {
                        alert('Erreur lors du chargement des utilisateurs');
                    }
                }
            };

            window.hideAssignmentModal = function() {
                const modal = document.getElementById('assignment-modal');
                modal.classList.remove('show');
                currentErrorId = null;
            };

            async function assignError(userId) {
                if (!currentErrorId) return;

                try {
                    const projectSlug = '{{ error_group.project }}';
                    const response = await fetch(`/projects/details/${projectSlug}/assign-error`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            error_id: currentErrorId,
                            user_id: userId || null
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        if (typeof showNotification === 'function') {
                            showNotification(result.message, 'success');
                        } else {
                            alert(result.message);
                        }
                        hideAssignmentModal();
                        // Recharger la page pour mettre à jour l'affichage
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        if (typeof showNotification === 'function') {
                            showNotification(result.error, 'error');
                        } else {
                            alert(result.error);
                        }
                    }
                } catch (error) {
                    console.error('Error assigning error:', error);
                    if (typeof showNotification === 'function') {
                        showNotification('Erreur lors de l\'assignation', 'error');
                    } else {
                        alert('Erreur lors de l\'assignation');
                    }
                }
            }

            // Fermer la modal d'assignation en cliquant à l'extérieur
            document.getElementById('assignment-modal').addEventListener('click', function(e) {
                if (e.target === this) {
                    hideAssignmentModal();
                }
            });

            // Fermer les modales avec la touche Échap
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    document.querySelectorAll('.modal.show').forEach(modal => {
                        modal.classList.remove('show');
                    });
                    closeLightbox();
                }
            });

            // ===== SYSTÈME DE COMMENTAIRES =====

            const errorId = {{ error_group.id }};
            let currentEditingComment = null;
            let currentReplyToComment = null;

            // Charger les commentaires au chargement de la page
            loadComments();

            // Gestionnaire du formulaire de commentaire
            document.getElementById('submit-comment').addEventListener('click', submitComment);
            document.getElementById('cancel-comment').addEventListener('click', cancelComment);

            // Upload de fichiers
            document.getElementById('comment-file').addEventListener('change', handleFileUpload);

            async function loadComments() {
                try {
                    const loadingEl = document.getElementById('comments-loading');
                    const emptyEl = document.getElementById('comments-empty');

                    if (loadingEl) loadingEl.style.display = 'block';
                    if (emptyEl) emptyEl.style.display = 'none';

                    const response = await fetch(`/api/comments/error/${errorId}`);
                    const data = await response.json();

                    if (data.success) {
                        displayComments(data.comments);
                        updateCommentsCount(data.total);
                    } else {
                        showError('Erreur lors du chargement des commentaires');
                    }
                } catch (error) {
                    console.error('Error loading comments:', error);
                    showError('Erreur lors du chargement des commentaires');
                } finally {
                    const loadingEl = document.getElementById('comments-loading');
                    if (loadingEl) loadingEl.style.display = 'none';
                }
            }

            function displayComments(comments) {
                const container = document.getElementById('comments-list');

                if (comments.length === 0) {
                    container.innerHTML = '';
                    document.getElementById('comments-empty').style.display = 'block';
                    return;
                }

                document.getElementById('comments-empty').style.display = 'none';

                const html = comments.map(comment => renderComment(comment)).join('');
                container.innerHTML = html;
            }

            function renderComment(comment) {
                const isInternal = comment.is_internal ? 'comment--internal' : '';
                const editedBadge = comment.is_edited ? '<span class="comment__edited">(modifié)</span>' : '';
                const internalBadge = comment.is_internal ? '<span class="comment__internal-badge">Interne</span>' : '';

                const repliesHtml = comment.replies ?
                    comment.replies.map(reply => renderComment(reply, true)).join('') : '';

                const replyClass = arguments[1] ? 'comment--reply' : '';

                return `
                    <div class="comment ${replyClass} ${isInternal}" data-comment-id="${comment.id}">
                        <div class="comment__header">
                            <div class="comment__avatar">${comment.author.initials}</div>
                            <div class="comment__info">
                                <div class="comment__author">${comment.author.name}</div>
                                <div class="comment__meta">
                                    <div class="comment__time">
                                        <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <circle cx="12" cy="12" r="10"/>
                                            <polyline points="12,6 12,12 16,14"/>
                                        </svg>
                                        ${comment.time_ago}
                                    </div>
                                    ${editedBadge}
                                    ${internalBadge}
                                </div>
                            </div>
                            ${comment.can_edit || comment.can_delete ? `
                                <div class="comment__actions">
                                    ${comment.can_edit ? `<button class="comment__action-btn" onclick="editComment(${comment.id})" title="Modifier">
                                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                                        </svg>
                                    </button>` : ''}
                                    ${comment.can_delete ? `<button class="comment__action-btn" onclick="deleteComment(${comment.id})" title="Supprimer">
                                        <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                        </svg>
                                    </button>` : ''}
                                </div>
                            ` : ''}
                        </div>

                        <div class="comment__content">
                            ${formatCommentContent(comment.content)}
                        </div>

                        ${comment.image_attachments.length > 0 || comment.file_attachments.length > 0 ? `
                            <div class="comment__attachments">
                                ${comment.image_attachments.length > 0 ? `
                                    <div class="comment__images">
                                        ${comment.image_attachments.map(img => `
                                            <div class="comment__image" onclick="openLightbox('/uploads/comments/${img.filename}')">
                                                <img src="/uploads/comments/${img.filename}" alt="${img.original_name}">
                                            </div>
                                        `).join('')}
                                    </div>
                                ` : ''}

                                ${comment.file_attachments.length > 0 ? `
                                    <div class="comment__files">
                                        ${comment.file_attachments.map(file => `
                                            <a href="/uploads/comments/${file.filename}" class="comment__file" target="_blank">
                                                <div class="comment__file-icon">
                                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                                    </svg>
                                                </div>
                                                <div class="comment__file-info">
                                                    <div class="comment__file-name">${file.original_name}</div>
                                                    <div class="comment__file-size">${formatFileSize(file.size)}</div>
                                                </div>
                                            </a>
                                        `).join('')}
                                    </div>
                                ` : ''}
                            </div>
                        ` : ''}

                        ${!arguments[1] ? `
                            <div class="comment__footer">
                                <button class="comment__reply-btn" onclick="replyToComment(${comment.id})">
                                    <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"/>
                                    </svg>
                                    Répondre
                                </button>
                            </div>
                        ` : ''}

                        ${repliesHtml}
                    </div>
                `;
            }

            function formatCommentContent(content) {
                // Conversion basique markdown vers HTML
                return content
                    .replace(/\n/g, '<br>')
                    .replace(/`([^`]+)`/g, '<code>$1</code>')
                    .replace(/```([^```]+)```/g, '<pre><code>$1</code></pre>');
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            async function submitComment() {
                const content = document.getElementById('comment-content').value.trim();
                const isInternal = document.getElementById('comment-internal').checked;

                if (!content) {
                    showError('Veuillez saisir un commentaire');
                    return;
                }

                const button = document.getElementById('submit-comment');
                button.disabled = true;
                button.textContent = 'Publication...';

                try {
                    // 1. Créer d'abord le commentaire
                    const url = currentEditingComment
                        ? `/api/comments/${currentEditingComment}/edit`
                        : '/api/comments/create';

                    const method = currentEditingComment ? 'PUT' : 'POST';

                    const data = {
                        content: content,
                        is_internal: isInternal
                    };

                    if (!currentEditingComment) {
                        data.error_id = errorId;
                        if (currentReplyToComment) {
                            data.parent_id = currentReplyToComment;
                        }
                    }

                    const response = await fetch(url, {
                        method: method,
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (!result.success) {
                        showError(result.error);
                        return;
                    }

                    // 2. Si on a des fichiers et que c'est un nouveau commentaire, les uploader
                    if (selectedFiles.length > 0 && !currentEditingComment) {
                        button.textContent = 'Upload des fichiers...';

                        for (const file of selectedFiles) {
                            const formData = new FormData();
                            formData.append('file', file);

                            const uploadResponse = await fetch(`/api/comments/${result.comment.id}/upload`, {
                                method: 'POST',
                                body: formData
                            });

                            const uploadResult = await uploadResponse.json();
                            if (!uploadResult.success) {
                                console.warn('Erreur upload fichier:', uploadResult.error);
                            }
                        }
                    }

                    showSuccess(result.message);
                    resetCommentForm();
                    await loadComments();

                } catch (error) {
                    console.error('Error submitting comment:', error);
                    showError('Erreur lors de la publication du commentaire');
                } finally {
                    button.disabled = false;
                    button.textContent = currentEditingComment ? 'Modifier' : 'Publier le commentaire';
                }
            }

            function cancelComment() {
                resetCommentForm();
            }

            function resetCommentForm() {
                document.getElementById('comment-content').value = '';
                document.getElementById('comment-internal').checked = false;
                document.getElementById('cancel-comment').style.display = 'none';
                document.getElementById('submit-comment').textContent = 'Publier le commentaire';
                document.getElementById('comment-content').placeholder = 'Partagez vos observations, questions ou solutions concernant cette erreur...';
                clearAllFiles();
                currentEditingComment = null;
                currentReplyToComment = null;
            }

            // Rendre les fonctions globales pour les onclick
            window.editComment = async function(commentId) {
                try {
                    // Récupérer le contenu original via l'API
                    const response = await fetch(`/api/comments/error/${errorId}`);
                    const data = await response.json();

                    if (data.success) {
                        // Trouver le commentaire dans la liste
                        let comment = null;
                        for (const c of data.comments) {
                            if (c.id === commentId) {
                                comment = c;
                                break;
                            }
                            // Chercher aussi dans les réponses
                            if (c.replies) {
                                for (const reply of c.replies) {
                                    if (reply.id === commentId) {
                                        comment = reply;
                                        break;
                                    }
                                }
                            }
                            if (comment) break;
                        }

                        if (comment) {
                            document.getElementById('comment-content').value = comment.content;
                            document.getElementById('comment-internal').checked = comment.is_internal;
                            document.getElementById('cancel-comment').style.display = 'inline-block';
                            document.getElementById('submit-comment').textContent = 'Modifier';
                            currentEditingComment = commentId;

                            // Scroll vers le formulaire
                            document.getElementById('comment-form').scrollIntoView({ behavior: 'smooth' });
                        }
                    }
                } catch (error) {
                    console.error('Error loading comment for edit:', error);
                    showError('Erreur lors du chargement du commentaire');
                }
            };

            window.replyToComment = function(commentId) {
                currentReplyToComment = commentId;
                document.getElementById('comment-content').placeholder = 'Répondre à ce commentaire...';
                document.getElementById('comment-content').focus();
            };

            window.deleteComment = async function(commentId) {
                if (!confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) {
                    return;
                }

                try {
                    const response = await fetch(`/api/comments/${commentId}/delete`, {
                        method: 'DELETE'
                    });

                    const result = await response.json();

                    if (result.success) {
                        showSuccess(result.message);
                        await loadComments();
                    } else {
                        showError(result.error);
                    }
                } catch (error) {
                    console.error('Error deleting comment:', error);
                    showError('Erreur lors de la suppression du commentaire');
                }
            };

            function updateCommentsCount(count) {
                document.getElementById('comments-count').textContent = count;
            }

            let selectedFiles = [];

            function handleFileUpload(event) {
                const files = Array.from(event.target.files);
                selectedFiles = [...selectedFiles, ...files];
                displayFilesPreview();
                console.log('Files selected:', files);
            }

            function displayFilesPreview() {
                const previewContainer = document.getElementById('files-preview');
                const filesList = document.getElementById('files-list');
                const uploadText = document.getElementById('upload-text');

                if (selectedFiles.length === 0) {
                    previewContainer.style.display = 'none';
                    uploadText.textContent = 'Joindre fichier';
                    return;
                }

                previewContainer.style.display = 'block';
                uploadText.textContent = `${selectedFiles.length} fichier(s) sélectionné(s)`;

                const html = selectedFiles.map((file, index) => {
                    const isImage = file.type.startsWith('image/');
                    const fileSize = formatFileSize(file.size);

                    return `
                        <div class="comment-form__file-item">
                            ${isImage ?
                                `<img class="comment-form__file-preview" src="${URL.createObjectURL(file)}" alt="${file.name}">` :
                                `<div class="comment-form__file-icon">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                    </svg>
                                </div>`
                            }
                            <div class="comment-form__file-info">
                                <div class="comment-form__file-name">${file.name}</div>
                                <div class="comment-form__file-size">${fileSize}</div>
                            </div>
                            <button type="button" class="comment-form__file-remove" onclick="removeFile(${index})">
                                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                    `;
                }).join('');

                filesList.innerHTML = html;
            }

            window.removeFile = function(index) {
                selectedFiles.splice(index, 1);
                displayFilesPreview();
            };

            function clearAllFiles() {
                selectedFiles = [];
                document.getElementById('comment-file').value = '';
                displayFilesPreview();
            }

            // Gestionnaire pour supprimer tous les fichiers
            document.getElementById('clear-files').addEventListener('click', clearAllFiles);

            // Lightbox pour les images
            window.openLightbox = function(imageSrc) {
                document.getElementById('lightbox-image').src = imageSrc;
                document.getElementById('image-lightbox').classList.add('show');
            };

            window.closeLightbox = function() {
                document.getElementById('image-lightbox').classList.remove('show');
            };

            // Fermer la lightbox en cliquant à l'extérieur
            document.getElementById('image-lightbox').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeLightbox();
                }
            });

            function showSuccess(message) {
                if (typeof showNotification === 'function') {
                    showNotification(message, 'success');
                } else {
                    alert(message);
                }
            }

            function showError(message) {
                if (typeof showNotification === 'function') {
                    showNotification(message, 'error');
                } else {
                    alert(message);
                }
            }
        });

        // ================== TAGS MANAGEMENT ==================
        const errorId = {{ error_group.id }};
        let isEditingTags = false;
        let originalTags = [];
        let currentTags = [];
        let tagSuggestions = [];
        let selectedSuggestionIndex = -1;

        // Fonctions utilitaires pour les tags (réutilisation des fonctions existantes)
        function showSuccess(message) {
            if (typeof showNotification === 'function') {
                showNotification(message, 'success');
            } else {
                alert(message);
            }
        }

        function showError(message) {
            if (typeof showNotification === 'function') {
                showNotification(message, 'error');
            } else {
                alert(message);
            }
        }

        window.toggleTagEdit = function() {
            const displaySection = document.getElementById('tags-display');
            const editSection = document.getElementById('tags-edit');
            
            if (isEditingTags) {
                cancelTagEdit();
            } else {
                // Sauvegarder l'état original
                originalTags = [...currentTags];
                
                displaySection.style.display = 'none';
                editSection.style.display = 'block';
                isEditingTags = true;
                
                document.getElementById('tag-input-field').focus();
            }
        };

        window.cancelTagEdit = function() {
            const displaySection = document.getElementById('tags-display');
            const editSection = document.getElementById('tags-edit');
            
            // Restaurer l'état original
            currentTags = [...originalTags];
            updateTagsEditDisplay();
            
            displaySection.style.display = 'block';
            editSection.style.display = 'none';
            isEditingTags = false;
            
            document.getElementById('tag-input-field').value = '';
            hideSuggestions();
        };

        window.saveTagChanges = async function() {
            try {
                const currentErrorId = {{ error_group.id }};
                const tagNames = currentTags.map(tag => tag.name);
                
                const response = await fetch(`/api/tags/error/${currentErrorId}/sync`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ tags: tagNames })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(result.message);
                    
                    // Mettre à jour l'affichage principal
                    updateTagsDisplay(result.tags);
                    
                    // Fermer le mode édition
                    const displaySection = document.getElementById('tags-display');
                    const editSection = document.getElementById('tags-edit');
                    
                    displaySection.style.display = 'block';
                    editSection.style.display = 'none';
                    isEditingTags = false;
                    
                    document.getElementById('tag-input-field').value = '';
                    hideSuggestions();
                } else {
                    showError(result.error);
                }
            } catch (error) {
                console.error('Error saving tags:', error);
                showError('Erreur lors de la sauvegarde des tags');
            }
        };

        window.addTag = async function() {
            const input = document.getElementById('tag-input-field');
            const tagName = input.value.trim();
            
            if (!tagName) return;
            
            // Vérifier que le tag n'existe pas déjà
            if (currentTags.some(tag => tag.name.toLowerCase() === tagName.toLowerCase())) {
                showError('Ce tag est déjà ajouté');
                return;
            }
            
            try {
                // Créer le tag s'il n'existe pas
                const response = await fetch('/api/tags', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: tagName })
                });

                const result = await response.json();

                if (result.success) {
                    currentTags.push(result.tag);
                    updateTagsEditDisplay();
                    input.value = '';
                    hideSuggestions();
                } else {
                    showError(result.error);
                }
            } catch (error) {
                console.error('Error adding tag:', error);
                showError('Erreur lors de l\'ajout du tag');
            }
        };

        window.removeTag = function(tagId) {
            currentTags = currentTags.filter(tag => tag.id !== tagId);
            updateTagsEditDisplay();
        };

        async function searchTags(query) {
            if (query.length < 1) {
                hideSuggestions();
                return;
            }

            try {
                const response = await fetch(`/api/tags/autocomplete?q=${encodeURIComponent(query)}&limit=5`);
                const result = await response.json();

                if (result.success) {
                    tagSuggestions = result.tags;
                    displaySuggestions();
                }
            } catch (error) {
                console.error('Error searching tags:', error);
            }
        }

        function displaySuggestions() {
            const suggestionsContainer = document.getElementById('tag-suggestions');
            
            if (tagSuggestions.length === 0) {
                hideSuggestions();
                return;
            }

            const html = tagSuggestions.map((tag, index) => `
                <div class="tag-input__suggestion ${index === selectedSuggestionIndex ? 'tag-input__suggestion--active' : ''}" 
                     onclick="selectSuggestion(${index})" 
                     data-index="${index}">
                    <span class="tag tag--small tag-input__suggestion-tag" style="--tag-bg: ${tag.color}">
                        ${tag.name}
                    </span>
                    <div class="tag-input__suggestion-info">
                        <div class="tag-input__suggestion-name">${tag.name}</div>
                        <div class="tag-input__suggestion-count">${tag.usage_count} utilisation(s)</div>
                    </div>
                </div>
            `).join('');

            suggestionsContainer.innerHTML = html;
            suggestionsContainer.style.display = 'block';
        }

        function hideSuggestions() {
            document.getElementById('tag-suggestions').style.display = 'none';
            selectedSuggestionIndex = -1;
        }

        window.selectSuggestion = function(index) {
            if (index >= 0 && index < tagSuggestions.length) {
                const tag = tagSuggestions[index];
                
                // Vérifier que le tag n'est pas déjà ajouté
                if (!currentTags.some(t => t.id === tag.id)) {
                    currentTags.push(tag);
                    updateTagsEditDisplay();
                }
                
                document.getElementById('tag-input-field').value = '';
                hideSuggestions();
            }
        };

        function updateTagsDisplay(tags) {
            const container = document.getElementById('tags-display');
            
            if (tags.length === 0) {
                container.innerHTML = `
                    <div class="tags-section__empty">
                        <div class="tags-section__empty-icon">
                            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.99 1.99 0 013 12V7a4 4 0 014-4z"/>
                            </svg>
                        </div>
                        <div class="tags-section__empty-title">Aucun tag assigné</div>
                        <div class="tags-section__empty-description">
                            Ajoutez des tags pour mieux organiser et filtrer vos erreurs
                        </div>
                    </div>
                `;
            } else {
                const tagsHtml = tags.map(tag => `
                    <span class="tag" style="--tag-bg: ${tag.color}">
                        <span class="tag__text">${tag.name}</span>
                        ${tag.usage_count > 1 ? `<span class="tag__count">${tag.usage_count}</span>` : ''}
                    </span>
                `).join('');
                
                container.innerHTML = `<div class="tags-container">${tagsHtml}</div>`;
            }
            
            // Mettre à jour les tags actuels
            currentTags = tags;
        }

        function updateTagsEditDisplay() {
            const container = document.getElementById('current-tags-edit');
            
            if (currentTags.length === 0) {
                container.innerHTML = '';
            } else {
                const tagsHtml = currentTags.map(tag => `
                    <span class="tag tag--removable" style="--tag-bg: ${tag.color}" data-tag-id="${tag.id}">
                        <span class="tag__text">${tag.name}</span>
                        <button class="tag__remove" onclick="removeTag(${tag.id})">
                            <svg width="10" height="10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </span>
                `).join('');
                
                container.innerHTML = `<div class="tags-container">${tagsHtml}</div>`;
            }
        }

        // Gestionnaires d'événements pour le champ de saisie des tags
        document.getElementById('tag-input-field').addEventListener('input', function(e) {
            searchTags(e.target.value);
        });

        document.getElementById('tag-input-field').addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (selectedSuggestionIndex >= 0) {
                    selectSuggestion(selectedSuggestionIndex);
                } else {
                    addTag();
                }
            } else if (e.key === 'ArrowDown') {
                e.preventDefault();
                if (tagSuggestions.length > 0) {
                    selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, tagSuggestions.length - 1);
                    displaySuggestions();
                }
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                if (tagSuggestions.length > 0) {
                    selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, 0);
                    displaySuggestions();
                }
            } else if (e.key === 'Escape') {
                hideSuggestions();
            }
        });

        // Fermer les suggestions quand on clique ailleurs
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.tag-input')) {
                hideSuggestions();
            }
        });

        // Initialiser les tags actuels depuis le template
        document.addEventListener('DOMContentLoaded', function() {
            // Récupérer les tags depuis les éléments existants
            const tagElements = document.querySelectorAll('#tags-display .tag');
            currentTags = Array.from(tagElements).map(el => {
                const style = el.getAttribute('style') || '';
                const colorMatch = style.match(/--tag-bg:\s*([^;]+)/);
                const color = colorMatch ? colorMatch[1].trim() : '#3B82F6';
                
                return {
                    id: parseInt(el.dataset.tagId) || 0,
                    name: el.querySelector('.tag__text').textContent.trim(),
                    color: color,
                    usage_count: el.querySelector('.tag__count') ? parseInt(el.querySelector('.tag__count').textContent) : 1
                };
            });
        });
    </script>
{% endblock %}
