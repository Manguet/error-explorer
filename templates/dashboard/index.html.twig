{% extends 'dashboard/base.html.twig' %}

{% block title %}Dashboard - Error Explorer{% endblock %}

{% block page_title %}Dashboard{% endblock %}
{% block page_subtitle %}Vue d'ensemble de vos erreurs et monitoring{% endblock %}

{% block header_actions %}
    <button class="btn btn--secondary" onclick="window.location.reload()">
        <svg class="btn__icon" width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        <span class="btn__text">Actualiser</span>
    </button>
    <label class="btn btn--secondary btn--toggle">
        <input type="checkbox" id="auto-refresh-toggle" checked class="btn__checkbox">
        <span class="btn__text">Auto-refresh</span>
    </label>
{% endblock %}

{% block body %}
    {% if projects|length == 0 %}
        <div class="dashboard-section">
            <div class="welcome-banner">
                <div class="welcome-content">
                    <div class="welcome-text">
                        <h3 class="welcome-title">
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="display: inline; margin-right: 8px;">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-1l-4 4z"/>
                            </svg>
                            Bienvenue {{ user.firstName }} {{ user.lastName }} !
                        </h3>
                        <p class="welcome-description">
                            Votre dashboard de monitoring d'erreurs est prêt. Commencez par créer votre premier projet.
                        </p>
                    </div>
                    <div class="welcome-actions">
                        <a href="{{ path('projects_create') }}" class="welcome-btn">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                            Créer un projet
                        </a>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    <!-- Statistics Cards -->
    <div class="dashboard-section">
        <div class="dashboard-stats-grid">
            <div class="dashboard-stat-card stat-danger">
                <div class="dashboard-stat-card-header">
                    <div class="dashboard-stat-card-title">Total Erreurs</div>
                    <div class="dashboard-stat-card-icon">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/>
                        </svg>
                    </div>
                </div>
                <div class="dashboard-stat-card-value">{{ stats.total_errors }}</div>
                <div class="dashboard-stat-card-label">{{ stats.open_errors }} ouvertes</div>
                <div class="dashboard-stat-card-trend trend-{% if stats.open_errors > (stats.total_errors * 0.7) %}up{% else %}down{% endif %}">
                    <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="{% if stats.open_errors > (stats.total_errors * 0.7) %}M13 17h8m0 0V9m0 8l-8-8-4 4-6-6{% else %}M13 7h8m0 0v8m0-8l-8 8-4-4-6 6{% endif %}"/>
                    </svg>
                    Tous projets
                </div>
            </div>

            <div class="dashboard-stat-card stat-warning">
                <div class="dashboard-stat-card-header">
                    <div class="dashboard-stat-card-title">Occurrences</div>
                    <div class="dashboard-stat-card-icon">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                        </svg>
                    </div>
                </div>
                <div class="dashboard-stat-card-value">{{ stats.total_occurrences|number_format }}</div>
                <div class="dashboard-stat-card-label">{{ stats.occurrences_today }} aujourd'hui</div>
                <div class="dashboard-stat-card-trend trend-stable">
                    <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                    </svg>
                    Volume total
                </div>
            </div>

            <div class="dashboard-stat-card stat-success">
                <div class="dashboard-stat-card-header">
                    <div class="dashboard-stat-card-title">Résolues</div>
                    <div class="dashboard-stat-card-icon">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                    </div>
                </div>
                <div class="dashboard-stat-card-value">{{ stats.resolved_errors }}</div>
                <div class="dashboard-stat-card-label">
                    {% if stats.total_errors > 0 %}
                        {{ ((stats.resolved_errors / stats.total_errors) * 100)|round }}% du total
                    {% else %}
                        Aucune erreur
                    {% endif %}
                </div>
                <div class="dashboard-stat-card-trend trend-up">
                    <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                    </svg>
                    Excellent travail !
                </div>
            </div>

            <div class="dashboard-stat-card stat-info">
                <div class="dashboard-stat-card-header">
                    <div class="dashboard-stat-card-title">Cette Semaine</div>
                    <div class="dashboard-stat-card-icon">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                    </div>
                </div>
                <div class="dashboard-stat-card-value">{{ stats.occurrences_this_week|number_format }}</div>
                <div class="dashboard-stat-card-label">occurrences</div>
                <div class="dashboard-stat-card-trend trend-stable">
                    <svg width="14" height="14" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
                    </svg>
                    7 derniers jours
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="dashboard-section">
        <div class="dashboard-filters">
            <form method="GET" class="dashboard-filters-grid">
                <div class="dashboard-filters-group">
                    <label>Projet</label>
                    <select name="project">
                        <option value="">Tous les projets</option>
                        {% for project in projects %}
                            <option value="{{ project }}" {{ (filters.project ?? '') == project ? 'selected' : '' }}>
                                {{ project }}
                            </option>
                        {% endfor %}
                    </select>
                </div>

                <div class="dashboard-filters-group">
                    <label for="status">Statut</label>
                    <select name="status" id="status">
                        <option value="">Tous les statuts</option>
                        <option value="open" {{ (filters.status ?? '') == 'open' ? 'selected' : '' }}>Ouvertes</option>
                        <option value="resolved" {{ (filters.status ?? '') == 'resolved' ? 'selected' : '' }}>Résolues</option>
                        <option value="ignored" {{ (filters.status ?? '') == 'ignored' ? 'selected' : '' }}>Ignorées</option>
                    </select>
                </div>

                <div class="dashboard-filters-group">
                    <label for="http-code">Code HTTP</label>
                    <select name="http_status" id="http-code">
                        <option value="">Tous les codes</option>
                        <option value="403" {{ (filters.http_status ?? '') == 403 ? 'selected' : '' }}>403 - Forbidden</option>
                        <option value="404" {{ (filters.http_status ?? '') == 404 ? 'selected' : '' }}>404 - Not Found</option>
                        <option value="500" {{ (filters.http_status ?? '') == 500 ? 'selected' : '' }}>500 - Server Error</option>
                        <option value="502" {{ (filters.http_status ?? '') == 502 ? 'selected' : '' }}>502 - Bad Gateway</option>
                        <option value="503" {{ (filters.http_status ?? '') == 503 ? 'selected' : '' }}>503 - Service Unavailable</option>
                    </select>
                </div>

                <div class="dashboard-filters-group">
                    <label for="error_type">Type d'erreur</label>
                    <select name="error_type" id="error_type">
                        <option value="">Tous les types</option>
                        <option value="exception" {{ (filters.error_type ?? '') == 'exception' ? 'selected' : '' }}>Exception</option>
                        <option value="error" {{ (filters.error_type ?? '') == 'error' ? 'selected' : '' }}>Error</option>
                        <option value="warning" {{ (filters.error_type ?? '') == 'warning' ? 'selected' : '' }}>Warning</option>
                        <option value="notice" {{ (filters.error_type ?? '') == 'notice' ? 'selected' : '' }}>Notice</option>
                    </select>
                </div>

                <div class="dashboard-filters-group">
                    <label for="days">Période</label>
                    <select name="days" id="days">
                        <option value="1" {{ app.request.get('days', 7) == 1 ? 'selected' : '' }}>Dernières 24h</option>
                        <option value="7" {{ app.request.get('days', 7) == 7 ? 'selected' : '' }}>7 derniers jours</option>
                        <option value="30" {{ app.request.get('days', 7) == 30 ? 'selected' : '' }}>30 derniers jours</option>
                        <option value="90" {{ app.request.get('days', 7) == 90 ? 'selected' : '' }}>90 derniers jours</option>
                    </select>
                </div>

                <div class="dashboard-filters-group">
                    <label for="search">Recherche</label>
                    <input type="text" name="search" id="search" value="{{ filters.search ?? '' }}" placeholder="Message, classe, fichier...">
                </div>

                <div class="dashboard-filters-actions">
                    <button type="submit" class="filter-btn">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"/>
                        </svg>
                        Filtrer
                    </button>
                    <a href="{{ path('dashboard_index') }}" class="filter-btn btn-secondary">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        Reset
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Top Projects Section (only if no project filter is active) -->
    {% if filters.project is not defined and stats.top_projects %}
        <div class="dashboard-section">
            <div class="dashboard-table-container">
                <div class="dashboard-table-container-header">
                    <h3>
                        <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="display: inline; margin-right: 8px;">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>
                        </svg>
                        Top des projets
                    </h3>
                </div>
                <div class="dashboard-top-projects">
                    <div class="dashboard-top-projects__grid">
                        {% for project in stats.top_projects %}
                            <div class="dashboard-top-projects__item">
                                <div class="dashboard-top-projects__content">
                                    <div class="dashboard-top-projects__info">
                                        <div class="dashboard-top-projects__name">
                                            {{ project.project }}
                                        </div>
                                        <div class="dashboard-top-projects__stats">
                                            {{ project.total_occurrences }} occurrences
                                        </div>
                                    </div>
                                    <a href="{{ path('dashboard_project', { project: project.project }) }}"
                                       class="dashboard-top-projects__action">
                                        Voir →
                                    </a>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    <!-- Errors DataTable -->
    <div class="dashboard-section">
        <div class="dashboard-table-container">
            <div class="dashboard-table-container-header">
                <h3>
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="display: inline; margin-right: 8px;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5C3.312 18.333 4.274 20 5.814 20z"/>
                    </svg>
                    Erreurs récentes
                </h3>
            </div>

            <div class="table-container">
                <div id="errors-table"></div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body_class %}dashboard-index{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/jq-3.2.1/dt-1.10.16/datatables.min.css"/>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.2.1/dt-1.10.16/datatables.min.js"></script>
    <script src="/bundles/datatables/js/datatables.js"></script>
    <script>
        // Actions sur les erreurs
            window.resolveError = async function(errorId) {
                if (!window.dashboard) {
                    console.error('Dashboard not initialized');
                    return;
                }
                const result = await window.dashboard.performAction(`{{ path('dashboard_error_resolve', { id: '__ID__' }) }}`.replace('__ID__', errorId));
                if (result) {
                    updateErrorStatus(errorId, 'resolved');
                }
            };

            window.ignoreError = async function(errorId) {
                if (!window.dashboard) {
                    console.error('Dashboard not initialized');
                    return;
                }
                const result = await window.dashboard.performAction(`{{ path('dashboard_error_ignore', { id: '__ID__' }) }}`.replace('__ID__', errorId));
                if (result) {
                    updateErrorStatus(errorId, 'ignored');
                }
            };

            window.reopenError = async function(errorId) {
                if (!window.dashboard) {
                    console.error('Dashboard not initialized');
                    return;
                }
                const result = await window.dashboard.performAction(`{{ path('dashboard_error_reopen', { id: '__ID__' }) }}`.replace('__ID__', errorId));
                if (result) {
                    updateErrorStatus(errorId, 'open');
                }
            };

            function updateErrorStatus(errorId, newStatus) {
                const row = document.querySelector(`tr[data-error-id="${errorId}"]`);
                if (row) {
                    // Mettre à jour le badge de statut
                    const statusBadge = row.querySelector('.badge-open, .badge-resolved, .badge-ignored');
                    if (statusBadge) {
                        statusBadge.className = `status-badge badge-${newStatus}`;
                        statusBadge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                    }

                    // Mettre à jour les boutons d'action
                    const actionsCell = row.querySelector('.table-actions');
                    if (actionsCell) {
                        let buttonsHtml = '';
                        if (newStatus === 'open') {
                            buttonsHtml = `
                                <button class="action-btn btn-success" onclick="resolveError(${errorId})" title="Résoudre">✓</button>
                                <button class="action-btn btn-danger" onclick="ignoreError(${errorId})" title="Ignorer">✕</button>
                            `;
                        } else {
                            buttonsHtml = `
                                <button class="action-btn btn-warning" onclick="reopenError(${errorId})" title="Rouvrir">↻</button>
                            `;
                        }
                        actionsCell.innerHTML = buttonsHtml;
                    }

                    // Animation de feedback
                    row.style.background = '#dcfce7';
                    row.style.transform = 'scale(1.02)';
                    setTimeout(() => {
                        row.style.background = '';
                        row.style.transform = '';
                    }, 1000);
                }
            }

            // Auto-refresh toggle
            const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
            if (autoRefreshToggle) {
                autoRefreshToggle.addEventListener('change', function() {
                    if (this.checked && window.dashboard) {
                        window.dashboard.startAutoRefresh();
                    } else if (window.dashboard) {
                        window.dashboard.stopAutoRefresh();
                    }
                });

                // Store preference
                autoRefreshToggle.addEventListener('change', function() {
                    localStorage.setItem('dashboard-auto-refresh', this.checked);
                });

                // Restore preference
                const savedPreference = localStorage.getItem('dashboard-auto-refresh');
                if (savedPreference !== null) {
                    autoRefreshToggle.checked = savedPreference === 'true';
                }
            }

            // Auto-refresh des stats
            document.addEventListener('dashboard:autoRefresh', async function() {
                try {
                    const params = new URLSearchParams();
                    {% for key, value in filters %}
                    {% if value %}
                    params.append('{{ key }}', '{{ value }}');
                    {% endif %}
                    {% endfor %}

                    const response = await fetch('{{ path('dashboard_api_stats') }}?' + params.toString());
                    const stats = await response.json();

                    // Mettre à jour les statistiques
                    updateStatsDisplay(stats);
                } catch (error) {
                    console.error('Erreur lors du refresh des stats:', error);
                }
            });

            function updateStatsDisplay(stats) {
                const statCards = document.querySelectorAll('.dashboard-stat-card-value');
                const values = [
                    stats.total_errors || 0,
                    (stats.total_occurrences || 0).toLocaleString(),
                    stats.resolved_errors || 0,
                    (stats.occurrences_this_week || 0).toLocaleString()
                ];

                statCards.forEach((card, index) => {
                    if (values[index] !== undefined) {
                        card.textContent = values[index];
                        card.style.transform = 'scale(1.05)';
                        setTimeout(() => {
                            card.style.transform = '';
                        }, 200);
                    }
                });
            }

            // Initialiser DataTable pour les erreurs
            $(document).ready(function () {
                $('#errors-table').initDataTables({{ datatable_settings(datatable) }}, {
                    searching: true,
                    dom: 'lTfgtpi',
                    pageLength: 25,
                    responsive: true,
                    language: {
                        "sProcessing":     "Traitement en cours...",
                        "sSearch":         "Rechercher :",
                        "sLengthMenu":     "Afficher _MENU_ éléments",
                        "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
                        "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
                        "sInfoFiltered":   "(filtré de _MAX_ éléments au total)",
                        "sInfoPostFix":    "",
                        "sLoadingRecords": "Chargement en cours...",
                        "sZeroRecords":    "Aucun élément à afficher",
                        "sEmptyTable":     "Aucune donnée disponible dans le tableau",
                        "oPaginate": {
                            "sFirst":      "Premier",
                            "sPrevious":   "Précédent",
                            "sNext":       "Suivant",
                            "sLast":       "Dernier"
                        },
                        "oAria": {
                            "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                            "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
                        }
                    }
                });
            });

            // ================== TAGS FILTERING ==================
            let filterTags = [];
            let tagFilterSuggestions = [];
            let selectedFilterSuggestionIndex = -1;

            // Initialiser les tags depuis les filtres existants
            const existingTags = '{{ (filters.tags ?? [])|join(",") }}';
            if (existingTags) {
                filterTags = existingTags.split(',').filter(tag => tag.trim());
            }

            window.removeFilterTag = function(tagToRemove) {
                filterTags = filterTags.filter(tag => tag !== tagToRemove);
                updateTagsFilterDisplay();
                updateTagsHiddenInput();
            };

            window.updateTagMode = function(mode) {
                document.getElementById('tag-mode-hidden').value = mode;
            };

            async function searchFilterTags(query) {
                if (query.length < 1) {
                    hideFilterSuggestions();
                    return;
                }

                try {
                    const response = await fetch(`/api/tags/autocomplete?q=${encodeURIComponent(query)}&limit=5`);
                    const result = await response.json();

                    if (result.success) {
                        tagFilterSuggestions = result.tags;
                        displayFilterSuggestions();
                    }
                } catch (error) {
                    console.error('Error searching tags:', error);
                }
            }

            function displayFilterSuggestions() {
                const suggestionsContainer = document.getElementById('tags-filter-suggestions');

                if (tagFilterSuggestions.length === 0) {
                    hideFilterSuggestions();
                    return;
                }

                const html = tagFilterSuggestions.map((tag, index) => `
                    <div class="tag-input__suggestion ${index === selectedFilterSuggestionIndex ? 'tag-input__suggestion--active' : ''}"
                         onclick="selectFilterSuggestion(${index})"
                         data-index="${index}">
                        <span class="tag tag--small tag-input__suggestion-tag" style="--tag-bg: ${tag.color}">
                            ${tag.name}
                        </span>
                        <div class="tag-input__suggestion-info">
                            <div class="tag-input__suggestion-name">${tag.name}</div>
                            <div class="tag-input__suggestion-count">${tag.usage_count} utilisation(s)</div>
                        </div>
                    </div>
                `).join('');

                suggestionsContainer.innerHTML = html;
                suggestionsContainer.style.display = 'block';
            }

            function hideFilterSuggestions() {
                document.getElementById('tags-filter-suggestions').style.display = 'none';
                selectedFilterSuggestionIndex = -1;
            }

            window.selectFilterSuggestion = function(index) {
                if (index >= 0 && index < tagFilterSuggestions.length) {
                    const tag = tagFilterSuggestions[index];

                    // Vérifier que le tag n'est pas déjà ajouté
                    if (!filterTags.includes(tag.name)) {
                        filterTags.push(tag.name);
                        updateTagsFilterDisplay();
                        updateTagsHiddenInput();
                    }

                    document.getElementById('tags-filter').value = '';
                    hideFilterSuggestions();
                }
            };

            function addFilterTag() {
                const input = document.getElementById('tags-filter');
                const tagName = input.value.trim();

                if (!tagName) return;

                // Vérifier que le tag n'est pas déjà ajouté
                if (!filterTags.includes(tagName)) {
                    filterTags.push(tagName);
                    updateTagsFilterDisplay();
                    updateTagsHiddenInput();
                }

                input.value = '';
                hideFilterSuggestions();
            }

            function updateTagsFilterDisplay() {
                const container = document.getElementById('tags-filter-display');

                if (filterTags.length === 0) {
                    container.innerHTML = '';
                    return;
                }

                const currentMode = document.getElementById('tag-mode-hidden').value || 'any';

                const tagsHtml = filterTags.map(tag => `
                    <span class="tag tag--small tag--removable" data-tag="${tag}">
                        <span class="tag__text">${tag}</span>
                        <button type="button" class="tag__remove" onclick="removeFilterTag('${tag}')">
                            <svg width="10" height="10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </span>
                `).join('');

                container.innerHTML = `
                    <div class="tags-container">${tagsHtml}</div>
                    <div class="tags-filter-mode">
                        <label>
                            <input type="radio" name="tag_mode_display" value="any" ${currentMode === 'any' ? 'checked' : ''} onchange="updateTagMode('any')">
                            Au moins un
                        </label>
                        <label>
                            <input type="radio" name="tag_mode_display" value="all" ${currentMode === 'all' ? 'checked' : ''} onchange="updateTagMode('all')">
                            Tous les tags
                        </label>
                    </div>
                `;
            }

            function updateTagsHiddenInput() {
                document.getElementById('tags-hidden').value = filterTags.join(',');
            }

            // Gestionnaires d'événements pour le filtre par tags
            document.getElementById('tags-filter').addEventListener('input', function(e) {
                searchFilterTags(e.target.value);
            });

            document.getElementById('tags-filter').addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (selectedFilterSuggestionIndex >= 0) {
                        selectFilterSuggestion(selectedFilterSuggestionIndex);
                    } else {
                        addFilterTag();
                    }
                } else if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (tagFilterSuggestions.length > 0) {
                        selectedFilterSuggestionIndex = Math.min(selectedFilterSuggestionIndex + 1, tagFilterSuggestions.length - 1);
                        displayFilterSuggestions();
                    }
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (tagFilterSuggestions.length > 0) {
                        selectedFilterSuggestionIndex = Math.max(selectedFilterSuggestionIndex - 1, 0);
                        displayFilterSuggestions();
                    }
                } else if (e.key === 'Escape') {
                    hideFilterSuggestions();
                }
            });

            // Fermer les suggestions quand on clique ailleurs
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.tags-filter-input')) {
                    hideFilterSuggestions();
                }
            });
    </script>
{% endblock %}
