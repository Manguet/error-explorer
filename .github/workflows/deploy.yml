name: 🚀 Deploy to Production

# Déclenche le déploiement seulement sur push main ET après succès des tests
on:
  workflow_run:
    workflows: ["Tests & Quality Check"]
    types:
      - completed
    branches: [main]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  deploy:
    name: 🚀 Deploy to error-explorer.com
    runs-on: ubuntu-latest

    # Ne déployer que si les tests ont réussi
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # 1. Récupérer le code
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour git

      # 2. Installer PHP
      - name: 🐘 Setup PHP ${{ env.PHP_VERSION }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, zip

      # 3. Installer Node.js
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 4. Installer les dépendances pour le build
      - name: 📦 Install dependencies
        run: |
          # PHP : production seulement
          composer install --no-dev --optimize-autoloader --no-interaction --no-scripts
          
          # Node.js : AVEC les dépendances de dev pour pouvoir builder
          npm ci

      # 5. Build des assets
      - name: 🔨 Build production assets
        run: |
          # Build avec Encore
          npm run build

      # 6. Préparer la clé SSH
      - name: 🔑 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # 7. Synchroniser les fichiers vers o2Switch
      - name: 📤 Deploy to server
        run: |
          # Exclure les fichiers de développement
          rsync -avz --delete \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='tests' \
            --exclude='var/cache' \
            --exclude='var/log' \
            --exclude='.env.local' \
            --exclude='.env.test' \
            --exclude='phpunit.xml.dist' \
            --exclude='.php-cs-fixer.*' \
            --exclude='webpack.config.js' \
            --exclude='package*.json' \
            --exclude='README.md' \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/

      # 8. Exécuter le script de déploiement sur le serveur
      - name: 🎯 Run deployment script
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Créer le script de déploiement s'il n'existe pas
            if [ ! -f "scripts/deploy.sh" ]; then
              mkdir -p scripts
              cat > scripts/deploy.sh << 'EOF'
            #!/bin/bash
            set -e
            echo "🚀 Déploiement simplifié..."
            
            # Installation des dépendances PHP
            composer install --no-dev --optimize-autoloader --no-interaction
            
            # Migrations
            php bin/console doctrine:migrations:migrate --no-interaction --env=prod || true
            
            # Cache
            php bin/console cache:clear --env=prod --no-debug
            php bin/console cache:warmup --env=prod --no-debug
            
            # Permissions
            chmod -R 755 var/cache var/log 2>/dev/null || true
            
            echo "✅ Déploiement terminé!"
            EOF
              chmod +x scripts/deploy.sh
            fi
            
            # Exécuter le déploiement
            bash scripts/deploy.sh

      # 9. Vérification de santé
      - name: 🏥 Health check
        run: |
          echo "Vérification que le site est accessible..."
          sleep 10
          curl -f https://error-explorer.com || echo "⚠️ Site non accessible immédiatement"

      # 10. Notification de succès
      - name: 🎉 Deployment successful
        run: |
          echo "🎉 Déploiement réussi!"
          echo "🌐 Site: https://error-explorer.com"
          echo "📅 Déployé le: $(date)"
